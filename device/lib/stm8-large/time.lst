                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module time
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___day
                                     12 	.globl ___month
                                     13 	.globl _RtcRead
                                     14 	.globl _sprintf
                                     15 	.globl _time
                                     16 	.globl _asctime
                                     17 	.globl _ctime
                                     18 	.globl _localtime
                                     19 	.globl _gmtime
                                     20 	.globl _mktime
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DATA
      000000                         25 _ascTimeBuffer:
      000000                         26 	.ds 32
      000020                         27 _lastTime:
      000020                         28 	.ds 12
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area INITIALIZED
                                     33 ;--------------------------------------------------------
                                     34 ; absolute external ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DABS (ABS)
                                     37 
                                     38 ; default segment ordering for linker
                                     39 	.area HOME
                                     40 	.area GSINIT
                                     41 	.area GSFINAL
                                     42 	.area CONST
                                     43 	.area INITIALIZER
                                     44 	.area CODE
                                     45 
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area GSINIT
                                     53 ;--------------------------------------------------------
                                     54 ; Home
                                     55 ;--------------------------------------------------------
                                     56 	.area HOME
                                     57 	.area HOME
                                     58 ;--------------------------------------------------------
                                     59 ; code
                                     60 ;--------------------------------------------------------
                                     61 	.area CODE
                                     62 ;	../time.c: 42: unsigned char RtcRead(struct tm *timeptr) {
                                     63 ;	-----------------------------------------
                                     64 ;	 function RtcRead
                                     65 ;	-----------------------------------------
      000000                         66 _RtcRead:
                                     67 ;	../time.c: 45: return 0;
      000000 4F               [ 1]   68 	clr	a
                                     69 ;	../time.c: 46: }
      000001 87               [ 5]   70 	retf
                                     71 ;	../time.c: 50: time_t time(time_t *timeptr) {
                                     72 ;	-----------------------------------------
                                     73 ;	 function time
                                     74 ;	-----------------------------------------
      000002                         75 _time:
      000002 52 10            [ 2]   76 	sub	sp, #16
                                     77 ;	../time.c: 52: time_t t=(time_t) -1;
      000004 AE FF FF         [ 2]   78 	ldw	x, #0xffff
      000007 1F 0F            [ 2]   79 	ldw	(0x0f, sp), x
      000009 AE FF FF         [ 2]   80 	ldw	x, #0xffff
      00000C 1F 0D            [ 2]   81 	ldw	(0x0d, sp), x
                                     82 ;	../time.c: 54: if (RtcRead(&now)) {
      00000E 96               [ 1]   83 	ldw	x, sp
      00000F 5C               [ 1]   84 	incw	x
      000010 90 93            [ 1]   85 	ldw	y, x
      000012 89               [ 2]   86 	pushw	x
      000013 90 89            [ 2]   87 	pushw	y
      000015 8Ds00r00r00      [ 5]   88 	callf	_RtcRead
      000019 5B 02            [ 2]   89 	addw	sp, #2
      00001B 85               [ 2]   90 	popw	x
      00001C 4D               [ 1]   91 	tnz	a
      00001D 27 0B            [ 1]   92 	jreq	00102$
                                     93 ;	../time.c: 55: t=mktime(&now);
      00001F 89               [ 2]   94 	pushw	x
      000020 8Ds00r02rFB      [ 5]   95 	callf	_mktime
      000024 5B 02            [ 2]   96 	addw	sp, #2
      000026 1F 0F            [ 2]   97 	ldw	(0x0f, sp), x
      000028 17 0D            [ 2]   98 	ldw	(0x0d, sp), y
      00002A                         99 00102$:
                                    100 ;	../time.c: 57: if (timeptr) {
                                    101 ;	../time.c: 58: *timeptr=t;
      00002A 1E 14            [ 2]  102 	ldw	x, (0x14, sp)
      00002C 27 07            [ 1]  103 	jreq	00104$
      00002E 16 0F            [ 2]  104 	ldw	y, (0x0f, sp)
      000030 EF 02            [ 2]  105 	ldw	(0x2, x), y
      000032 16 0D            [ 2]  106 	ldw	y, (0x0d, sp)
      000034 FF               [ 2]  107 	ldw	(x), y
      000035                        108 00104$:
                                    109 ;	../time.c: 60: return t;
      000035 1E 0F            [ 2]  110 	ldw	x, (0x0f, sp)
      000037 16 0D            [ 2]  111 	ldw	y, (0x0d, sp)
                                    112 ;	../time.c: 61: }
      000039 5B 10            [ 2]  113 	addw	sp, #16
      00003B 87               [ 5]  114 	retf
                                    115 ;	../time.c: 73: static void CheckTime(struct tm *timeptr) {
                                    116 ;	-----------------------------------------
                                    117 ;	 function CheckTime
                                    118 ;	-----------------------------------------
      00003C                        119 _CheckTime:
                                    120 ;	../time.c: 84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      00003C 16 04            [ 2]  121 	ldw	y, (0x04, sp)
      00003E 90 F6            [ 1]  122 	ld	a, (y)
      000040 A1 3B            [ 1]  123 	cp	a, #0x3b
      000042 23 04            [ 2]  124 	jrule	00102$
      000044 A6 3B            [ 1]  125 	ld	a, #0x3b
      000046 90 F7            [ 1]  126 	ld	(y), a
      000048                        127 00102$:
                                    128 ;	../time.c: 85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      000048 93               [ 1]  129 	ldw	x, y
      000049 5C               [ 1]  130 	incw	x
      00004A F6               [ 1]  131 	ld	a, (x)
      00004B A1 3B            [ 1]  132 	cp	a, #0x3b
      00004D 23 03            [ 2]  133 	jrule	00104$
      00004F A6 3B            [ 1]  134 	ld	a, #0x3b
      000051 F7               [ 1]  135 	ld	(x), a
      000052                        136 00104$:
                                    137 ;	../time.c: 86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      000052 93               [ 1]  138 	ldw	x, y
      000053 5C               [ 1]  139 	incw	x
      000054 5C               [ 1]  140 	incw	x
      000055 F6               [ 1]  141 	ld	a, (x)
      000056 A1 17            [ 1]  142 	cp	a, #0x17
      000058 23 03            [ 2]  143 	jrule	00106$
      00005A A6 17            [ 1]  144 	ld	a, #0x17
      00005C F7               [ 1]  145 	ld	(x), a
      00005D                        146 00106$:
                                    147 ;	../time.c: 87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      00005D 93               [ 1]  148 	ldw	x, y
      00005E 1C 00 07         [ 2]  149 	addw	x, #0x0007
      000061 F6               [ 1]  150 	ld	a, (x)
      000062 A1 06            [ 1]  151 	cp	a, #0x06
      000064 23 03            [ 2]  152 	jrule	00108$
      000066 A6 06            [ 1]  153 	ld	a, #0x06
      000068 F7               [ 1]  154 	ld	(x), a
      000069                        155 00108$:
                                    156 ;	../time.c: 88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      000069 93               [ 1]  157 	ldw	x, y
      00006A 1C 00 03         [ 2]  158 	addw	x, #0x0003
      00006D F6               [ 1]  159 	ld	a, (x)
      00006E A1 01            [ 1]  160 	cp	a, #0x01
      000070 24 05            [ 1]  161 	jrnc	00112$
      000072 A6 01            [ 1]  162 	ld	a, #0x01
      000074 F7               [ 1]  163 	ld	(x), a
      000075 20 07            [ 2]  164 	jra	00113$
      000077                        165 00112$:
                                    166 ;	../time.c: 89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000077 A1 1F            [ 1]  167 	cp	a, #0x1f
      000079 23 03            [ 2]  168 	jrule	00113$
      00007B A6 1F            [ 1]  169 	ld	a, #0x1f
      00007D F7               [ 1]  170 	ld	(x), a
      00007E                        171 00113$:
                                    172 ;	../time.c: 90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      00007E 93               [ 1]  173 	ldw	x, y
      00007F 1C 00 04         [ 2]  174 	addw	x, #0x0004
      000082 F6               [ 1]  175 	ld	a, (x)
      000083 A1 0B            [ 1]  176 	cp	a, #0x0b
      000085 23 03            [ 2]  177 	jrule	00115$
      000087 A6 0B            [ 1]  178 	ld	a, #0x0b
      000089 F7               [ 1]  179 	ld	(x), a
      00008A                        180 00115$:
                                    181 ;	../time.c: 91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      00008A 72 A9 00 05      [ 2]  182 	addw	y, #0x0005
      00008E 93               [ 1]  183 	ldw	x, y
      00008F FE               [ 2]  184 	ldw	x, (x)
      000090 2A 04            [ 1]  185 	jrpl	00118$
      000092 93               [ 1]  186 	ldw	x, y
      000093 6F 01            [ 1]  187 	clr	(0x1, x)
      000095 7F               [ 1]  188 	clr	(x)
      000096                        189 00118$:
                                    190 ;	../time.c: 92: }
      000096 87               [ 5]  191 	retf
                                    192 ;	../time.c: 95: char *asctime(struct tm *timeptr) {
                                    193 ;	-----------------------------------------
                                    194 ;	 function asctime
                                    195 ;	-----------------------------------------
      000097                        196 _asctime:
      000097 52 0C            [ 2]  197 	sub	sp, #12
                                    198 ;	../time.c: 96: CheckTime(timeptr);
      000099 1E 10            [ 2]  199 	ldw	x, (0x10, sp)
      00009B 89               [ 2]  200 	pushw	x
      00009C 8Ds00r00r3C      [ 5]  201 	callf	_CheckTime
      0000A0 5B 02            [ 2]  202 	addw	sp, #2
                                    203 ;	../time.c: 100: timeptr->tm_year+1900);
      0000A2 16 10            [ 2]  204 	ldw	y, (0x10, sp)
      0000A4 93               [ 1]  205 	ldw	x, y
      0000A5 EE 05            [ 2]  206 	ldw	x, (0x5, x)
      0000A7 1C 07 6C         [ 2]  207 	addw	x, #0x076c
      0000AA 1F 01            [ 2]  208 	ldw	(0x01, sp), x
                                    209 ;	../time.c: 99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0000AC 90 F6            [ 1]  210 	ld	a, (y)
      0000AE 6B 04            [ 1]  211 	ld	(0x04, sp), a
      0000B0 0F 03            [ 1]  212 	clr	(0x03, sp)
      0000B2 93               [ 1]  213 	ldw	x, y
      0000B3 E6 01            [ 1]  214 	ld	a, (0x1, x)
      0000B5 6B 06            [ 1]  215 	ld	(0x06, sp), a
      0000B7 0F 05            [ 1]  216 	clr	(0x05, sp)
      0000B9 93               [ 1]  217 	ldw	x, y
      0000BA E6 02            [ 1]  218 	ld	a, (0x2, x)
      0000BC 6B 08            [ 1]  219 	ld	(0x08, sp), a
      0000BE 0F 07            [ 1]  220 	clr	(0x07, sp)
                                    221 ;	../time.c: 98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      0000C0 93               [ 1]  222 	ldw	x, y
      0000C1 E6 03            [ 1]  223 	ld	a, (0x3, x)
      0000C3 6B 0A            [ 1]  224 	ld	(0x0a, sp), a
      0000C5 0F 09            [ 1]  225 	clr	(0x09, sp)
      0000C7 93               [ 1]  226 	ldw	x, y
      0000C8 E6 04            [ 1]  227 	ld	a, (0x4, x)
      0000CA 5F               [ 1]  228 	clrw	x
      0000CB 97               [ 1]  229 	ld	xl, a
      0000CC 58               [ 2]  230 	sllw	x
      0000CD 1Cr00r0C         [ 2]  231 	addw	x, #(___month + 0)
      0000D0 4F               [ 1]  232 	clr	a
      0000D1 A9s00            [ 1]  233 	adc	a, #((___month + 0) >> 16)
      0000D3 FE               [ 2]  234 	ldw	x, (x)
      0000D4 1F 0B            [ 2]  235 	ldw	(0x0b, sp), x
      0000D6 90 E6 07         [ 1]  236 	ld	a, (0x7, y)
      0000D9 5F               [ 1]  237 	clrw	x
      0000DA 97               [ 1]  238 	ld	xl, a
      0000DB 58               [ 2]  239 	sllw	x
      0000DC 1Cr00r24         [ 2]  240 	addw	x, #(___day + 0)
      0000DF 4F               [ 1]  241 	clr	a
      0000E0 A9s00            [ 1]  242 	adc	a, #((___day + 0) >> 16)
      0000E2 FE               [ 2]  243 	ldw	x, (x)
      0000E3 90 93            [ 1]  244 	ldw	y, x
                                    245 ;	../time.c: 97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      0000E5 1E 01            [ 2]  246 	ldw	x, (0x01, sp)
      0000E7 89               [ 2]  247 	pushw	x
      0000E8 1E 05            [ 2]  248 	ldw	x, (0x05, sp)
      0000EA 89               [ 2]  249 	pushw	x
      0000EB 1E 09            [ 2]  250 	ldw	x, (0x09, sp)
      0000ED 89               [ 2]  251 	pushw	x
      0000EE 1E 0D            [ 2]  252 	ldw	x, (0x0d, sp)
      0000F0 89               [ 2]  253 	pushw	x
      0000F1 1E 11            [ 2]  254 	ldw	x, (0x11, sp)
      0000F3 89               [ 2]  255 	pushw	x
      0000F4 1E 15            [ 2]  256 	ldw	x, (0x15, sp)
      0000F6 89               [ 2]  257 	pushw	x
      0000F7 90 89            [ 2]  258 	pushw	y
      0000F9 4Br32            [ 1]  259 	push	#<(___str_0 + 0)
      0000FB 4Bs00            [ 1]  260 	push	#((___str_0 + 0) >> 8)
      0000FD 4Br00            [ 1]  261 	push	#<(_ascTimeBuffer + 0)
      0000FF 4Bs00            [ 1]  262 	push	#((_ascTimeBuffer + 0) >> 8)
      000101 8Ds00r00r00      [ 5]  263 	callf	_sprintf
      000105 5B 12            [ 2]  264 	addw	sp, #18
                                    265 ;	../time.c: 101: return ascTimeBuffer;
      000107 AEr00r00         [ 2]  266 	ldw	x, #(_ascTimeBuffer + 0)
                                    267 ;	../time.c: 102: }
      00010A 5B 0C            [ 2]  268 	addw	sp, #12
      00010C 87               [ 5]  269 	retf
                                    270 ;	../time.c: 104: char *ctime(time_t *timep) {
                                    271 ;	-----------------------------------------
                                    272 ;	 function ctime
                                    273 ;	-----------------------------------------
      00010D                        274 _ctime:
                                    275 ;	../time.c: 105: return asctime(localtime(timep));
      00010D 1E 04            [ 2]  276 	ldw	x, (0x04, sp)
      00010F 89               [ 2]  277 	pushw	x
      000110 8Ds00r01r1E      [ 5]  278 	callf	_localtime
      000114 5B 02            [ 2]  279 	addw	sp, #2
      000116 89               [ 2]  280 	pushw	x
      000117 8Ds00r00r97      [ 5]  281 	callf	_asctime
      00011B 5B 02            [ 2]  282 	addw	sp, #2
                                    283 ;	../time.c: 106: }
      00011D 87               [ 5]  284 	retf
                                    285 ;	../time.c: 121: struct tm *localtime(time_t *timep) {
                                    286 ;	-----------------------------------------
                                    287 ;	 function localtime
                                    288 ;	-----------------------------------------
      00011E                        289 _localtime:
                                    290 ;	../time.c: 122: return gmtime(timep);
      00011E 1E 04            [ 2]  291 	ldw	x, (0x04, sp)
      000120 89               [ 2]  292 	pushw	x
      000121 8Ds00r01r28      [ 5]  293 	callf	_gmtime
      000125 5B 02            [ 2]  294 	addw	sp, #2
                                    295 ;	../time.c: 123: }
      000127 87               [ 5]  296 	retf
                                    297 ;	../time.c: 125: struct tm *gmtime(time_t *timep) {
                                    298 ;	-----------------------------------------
                                    299 ;	 function gmtime
                                    300 ;	-----------------------------------------
      000128                        301 _gmtime:
      000128 52 10            [ 2]  302 	sub	sp, #16
                                    303 ;	../time.c: 126: unsigned long epoch=*timep;
      00012A 1E 14            [ 2]  304 	ldw	x, (0x14, sp)
      00012C 90 93            [ 1]  305 	ldw	y, x
      00012E 90 EE 02         [ 2]  306 	ldw	y, (0x2, y)
      000131 FE               [ 2]  307 	ldw	x, (x)
      000132 17 0F            [ 2]  308 	ldw	(0x0f, sp), y
      000134 1F 0D            [ 2]  309 	ldw	(0x0d, sp), x
                                    310 ;	../time.c: 131: lastTime.tm_sec=epoch%60;
      000136 4B 3C            [ 1]  311 	push	#0x3c
      000138 5F               [ 1]  312 	clrw	x
      000139 89               [ 2]  313 	pushw	x
      00013A 4B 00            [ 1]  314 	push	#0x00
      00013C 1E 13            [ 2]  315 	ldw	x, (0x13, sp)
      00013E 89               [ 2]  316 	pushw	x
      00013F 1E 13            [ 2]  317 	ldw	x, (0x13, sp)
      000141 89               [ 2]  318 	pushw	x
      000142 8Ds00r00r00      [ 5]  319 	callf	__modulong
      000146 5B 08            [ 2]  320 	addw	sp, #8
      000148 9F               [ 1]  321 	ld	a, xl
      000149 C7u00u20         [ 1]  322 	ld	_lastTime+0, a
                                    323 ;	../time.c: 132: epoch/=60; // now it is minutes
      00014C 4B 3C            [ 1]  324 	push	#0x3c
      00014E 5F               [ 1]  325 	clrw	x
      00014F 89               [ 2]  326 	pushw	x
      000150 4B 00            [ 1]  327 	push	#0x00
      000152 1E 13            [ 2]  328 	ldw	x, (0x13, sp)
      000154 89               [ 2]  329 	pushw	x
      000155 1E 13            [ 2]  330 	ldw	x, (0x13, sp)
      000157 89               [ 2]  331 	pushw	x
      000158 8Ds00r00r00      [ 5]  332 	callf	__divulong
      00015C 5B 08            [ 2]  333 	addw	sp, #8
      00015E 1F 0D            [ 2]  334 	ldw	(0x0d, sp), x
      000160 17 0B            [ 2]  335 	ldw	(0x0b, sp), y
                                    336 ;	../time.c: 133: lastTime.tm_min=epoch%60;
      000162 AEr00r21         [ 2]  337 	ldw	x, #(_lastTime + 0)+1
      000165 1F 0F            [ 2]  338 	ldw	(0x0f, sp), x
      000167 4B 3C            [ 1]  339 	push	#0x3c
      000169 5F               [ 1]  340 	clrw	x
      00016A 89               [ 2]  341 	pushw	x
      00016B 4B 00            [ 1]  342 	push	#0x00
      00016D 1E 11            [ 2]  343 	ldw	x, (0x11, sp)
      00016F 89               [ 2]  344 	pushw	x
      000170 1E 11            [ 2]  345 	ldw	x, (0x11, sp)
      000172 89               [ 2]  346 	pushw	x
      000173 8Ds00r00r00      [ 5]  347 	callf	__modulong
      000177 5B 08            [ 2]  348 	addw	sp, #8
      000179 9F               [ 1]  349 	ld	a, xl
      00017A 1E 0F            [ 2]  350 	ldw	x, (0x0f, sp)
      00017C F7               [ 1]  351 	ld	(x), a
                                    352 ;	../time.c: 134: epoch/=60; // now it is hours
      00017D 4B 3C            [ 1]  353 	push	#0x3c
      00017F 5F               [ 1]  354 	clrw	x
      000180 89               [ 2]  355 	pushw	x
      000181 4B 00            [ 1]  356 	push	#0x00
      000183 1E 11            [ 2]  357 	ldw	x, (0x11, sp)
      000185 89               [ 2]  358 	pushw	x
      000186 1E 11            [ 2]  359 	ldw	x, (0x11, sp)
      000188 89               [ 2]  360 	pushw	x
      000189 8Ds00r00r00      [ 5]  361 	callf	__divulong
      00018D 5B 08            [ 2]  362 	addw	sp, #8
      00018F 1F 0D            [ 2]  363 	ldw	(0x0d, sp), x
      000191 17 0B            [ 2]  364 	ldw	(0x0b, sp), y
                                    365 ;	../time.c: 135: lastTime.tm_hour=epoch%24;
      000193 AEr00r22         [ 2]  366 	ldw	x, #(_lastTime + 0)+2
      000196 1F 0F            [ 2]  367 	ldw	(0x0f, sp), x
      000198 4B 18            [ 1]  368 	push	#0x18
      00019A 5F               [ 1]  369 	clrw	x
      00019B 89               [ 2]  370 	pushw	x
      00019C 4B 00            [ 1]  371 	push	#0x00
      00019E 1E 11            [ 2]  372 	ldw	x, (0x11, sp)
      0001A0 89               [ 2]  373 	pushw	x
      0001A1 1E 11            [ 2]  374 	ldw	x, (0x11, sp)
      0001A3 89               [ 2]  375 	pushw	x
      0001A4 8Ds00r00r00      [ 5]  376 	callf	__modulong
      0001A8 5B 08            [ 2]  377 	addw	sp, #8
      0001AA 9F               [ 1]  378 	ld	a, xl
      0001AB 1E 0F            [ 2]  379 	ldw	x, (0x0f, sp)
      0001AD F7               [ 1]  380 	ld	(x), a
                                    381 ;	../time.c: 136: epoch/=24; // now it is days
      0001AE 4B 18            [ 1]  382 	push	#0x18
      0001B0 5F               [ 1]  383 	clrw	x
      0001B1 89               [ 2]  384 	pushw	x
      0001B2 4B 00            [ 1]  385 	push	#0x00
      0001B4 1E 11            [ 2]  386 	ldw	x, (0x11, sp)
      0001B6 89               [ 2]  387 	pushw	x
      0001B7 1E 11            [ 2]  388 	ldw	x, (0x11, sp)
      0001B9 89               [ 2]  389 	pushw	x
      0001BA 8Ds00r00r00      [ 5]  390 	callf	__divulong
      0001BE 5B 08            [ 2]  391 	addw	sp, #8
      0001C0 1F 03            [ 2]  392 	ldw	(0x03, sp), x
      0001C2 17 01            [ 2]  393 	ldw	(0x01, sp), y
                                    394 ;	../time.c: 137: lastTime.tm_wday=(epoch+4)%7;
      0001C4 AEr00r27         [ 2]  395 	ldw	x, #(_lastTime + 0)+7
      0001C7 1F 0F            [ 2]  396 	ldw	(0x0f, sp), x
      0001C9 1E 03            [ 2]  397 	ldw	x, (0x03, sp)
      0001CB 1C 00 04         [ 2]  398 	addw	x, #0x0004
      0001CE 16 01            [ 2]  399 	ldw	y, (0x01, sp)
      0001D0 24 02            [ 1]  400 	jrnc	00164$
      0001D2 90 5C            [ 1]  401 	incw	y
      0001D4                        402 00164$:
      0001D4 4B 07            [ 1]  403 	push	#0x07
      0001D6 4B 00            [ 1]  404 	push	#0x00
      0001D8 4B 00            [ 1]  405 	push	#0x00
      0001DA 4B 00            [ 1]  406 	push	#0x00
      0001DC 89               [ 2]  407 	pushw	x
      0001DD 90 89            [ 2]  408 	pushw	y
      0001DF 8Ds00r00r00      [ 5]  409 	callf	__modulong
      0001E3 5B 08            [ 2]  410 	addw	sp, #8
      0001E5 9F               [ 1]  411 	ld	a, xl
      0001E6 1E 0F            [ 2]  412 	ldw	x, (0x0f, sp)
      0001E8 F7               [ 1]  413 	ld	(x), a
                                    414 ;	../time.c: 140: days=0;
      0001E9 5F               [ 1]  415 	clrw	x
      0001EA 1F 07            [ 2]  416 	ldw	(0x07, sp), x
      0001EC 1F 05            [ 2]  417 	ldw	(0x05, sp), x
                                    418 ;	../time.c: 141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      0001EE AE 07 B2         [ 2]  419 	ldw	x, #0x07b2
      0001F1 1F 0F            [ 2]  420 	ldw	(0x0f, sp), x
      0001F3                        421 00101$:
      0001F3 7B 10            [ 1]  422 	ld	a, (0x10, sp)
      0001F5 A4 03            [ 1]  423 	and	a, #0x03
      0001F7 6B 0A            [ 1]  424 	ld	(0x0a, sp), a
      0001F9 0F 09            [ 1]  425 	clr	(0x09, sp)
      0001FB 1E 09            [ 2]  426 	ldw	x, (0x09, sp)
      0001FD 26 07            [ 1]  427 	jrne	00118$
      0001FF AE 01 6E         [ 2]  428 	ldw	x, #0x016e
      000202 1F 0D            [ 2]  429 	ldw	(0x0d, sp), x
      000204 20 05            [ 2]  430 	jra	00119$
      000206                        431 00118$:
      000206 AE 01 6D         [ 2]  432 	ldw	x, #0x016d
      000209 1F 0D            [ 2]  433 	ldw	(0x0d, sp), x
      00020B                        434 00119$:
      00020B 16 0D            [ 2]  435 	ldw	y, (0x0d, sp)
      00020D 5F               [ 1]  436 	clrw	x
      00020E 90 5D            [ 2]  437 	tnzw	y
      000210 2A 01            [ 1]  438 	jrpl	00166$
      000212 5A               [ 2]  439 	decw	x
      000213                        440 00166$:
      000213 72 F9 07         [ 2]  441 	addw	y, (0x07, sp)
      000216 17 0D            [ 2]  442 	ldw	(0x0d, sp), y
      000218 9F               [ 1]  443 	ld	a, xl
      000219 19 06            [ 1]  444 	adc	a, (0x06, sp)
      00021B 6B 0C            [ 1]  445 	ld	(0x0c, sp), a
      00021D 9E               [ 1]  446 	ld	a, xh
      00021E 19 05            [ 1]  447 	adc	a, (0x05, sp)
      000220 6B 0B            [ 1]  448 	ld	(0x0b, sp), a
      000222 16 0D            [ 2]  449 	ldw	y, (0x0d, sp)
      000224 17 07            [ 2]  450 	ldw	(0x07, sp), y
      000226 16 0B            [ 2]  451 	ldw	y, (0x0b, sp)
      000228 17 05            [ 2]  452 	ldw	(0x05, sp), y
      00022A 1E 03            [ 2]  453 	ldw	x, (0x03, sp)
      00022C 13 0D            [ 2]  454 	cpw	x, (0x0d, sp)
      00022E 7B 02            [ 1]  455 	ld	a, (0x02, sp)
      000230 12 0C            [ 1]  456 	sbc	a, (0x0c, sp)
      000232 7B 01            [ 1]  457 	ld	a, (0x01, sp)
      000234 12 0B            [ 1]  458 	sbc	a, (0x0b, sp)
      000236 25 07            [ 1]  459 	jrc	00103$
                                    460 ;	../time.c: 142: year++;
      000238 1E 0F            [ 2]  461 	ldw	x, (0x0f, sp)
      00023A 5C               [ 1]  462 	incw	x
      00023B 1F 0F            [ 2]  463 	ldw	(0x0f, sp), x
      00023D 20 B4            [ 2]  464 	jra	00101$
      00023F                        465 00103$:
                                    466 ;	../time.c: 144: lastTime.tm_year=year-1900;
      00023F AEr00r25         [ 2]  467 	ldw	x, #(_lastTime + 0)+5
      000242 16 0F            [ 2]  468 	ldw	y, (0x0f, sp)
      000244 72 A2 07 6C      [ 2]  469 	subw	y, #0x076c
      000248 FF               [ 2]  470 	ldw	(x), y
                                    471 ;	../time.c: 146: days -= LEAP_YEAR(year) ? 366 : 365;
      000249 16 09            [ 2]  472 	ldw	y, (0x09, sp)
      00024B 17 0F            [ 2]  473 	ldw	(0x0f, sp), y
      00024D 1E 09            [ 2]  474 	ldw	x, (0x09, sp)
      00024F 26 04            [ 1]  475 	jrne	00120$
      000251 AE 01 6E         [ 2]  476 	ldw	x, #0x016e
      000254 BC                     477 	.byte 0xbc
      000255                        478 00120$:
      000255 AE 01 6D         [ 2]  479 	ldw	x, #0x016d
      000258                        480 00121$:
      000258 1F 0D            [ 2]  481 	ldw	(0x0d, sp), x
      00025A 5F               [ 1]  482 	clrw	x
      00025B 0D 0D            [ 1]  483 	tnz	(0x0d, sp)
      00025D 2A 01            [ 1]  484 	jrpl	00170$
      00025F 5A               [ 2]  485 	decw	x
      000260                        486 00170$:
      000260 16 07            [ 2]  487 	ldw	y, (0x07, sp)
      000262 72 F2 0D         [ 2]  488 	subw	y, (0x0d, sp)
      000265 7B 06            [ 1]  489 	ld	a, (0x06, sp)
      000267 89               [ 2]  490 	pushw	x
      000268 12 02            [ 1]  491 	sbc	a, (#2, sp)
      00026A 85               [ 2]  492 	popw	x
      00026B 97               [ 1]  493 	ld	xl, a
      00026C 7B 05            [ 1]  494 	ld	a, (0x05, sp)
      00026E 89               [ 2]  495 	pushw	x
      00026F 12 01            [ 1]  496 	sbc	a, (#1, sp)
      000271 85               [ 2]  497 	popw	x
      000272 17 0D            [ 2]  498 	ldw	(0x0d, sp), y
                                    499 ;	../time.c: 147: epoch -= days; // now it is days in this year, starting at 0
      000274 16 03            [ 2]  500 	ldw	y, (0x03, sp)
      000276 72 F2 0D         [ 2]  501 	subw	y, (0x0d, sp)
      000279 88               [ 1]  502 	push	a
      00027A 7B 03            [ 1]  503 	ld	a, (0x03, sp)
      00027C 89               [ 2]  504 	pushw	x
      00027D 12 02            [ 1]  505 	sbc	a, (#2, sp)
      00027F 85               [ 2]  506 	popw	x
      000280 97               [ 1]  507 	ld	xl, a
      000281 7B 02            [ 1]  508 	ld	a, (0x02, sp)
      000283 12 01            [ 1]  509 	sbc	a, (1, sp)
      000285 95               [ 1]  510 	ld	xh, a
      000286 84               [ 1]  511 	pop	a
      000287 17 08            [ 2]  512 	ldw	(0x08, sp), y
      000289 1F 06            [ 2]  513 	ldw	(0x06, sp), x
                                    514 ;	../time.c: 148: lastTime.tm_yday=epoch;
      00028B AEr00r28         [ 2]  515 	ldw	x, #(_lastTime + 0)+8
      00028E 16 08            [ 2]  516 	ldw	y, (0x08, sp)
      000290 FF               [ 2]  517 	ldw	(x), y
                                    518 ;	../time.c: 153: for (month=0; month<12; month++) {
      000291 0F 0E            [ 1]  519 	clr	(0x0e, sp)
      000293                        520 00114$:
                                    521 ;	../time.c: 154: if (month==1) { // februari
      000293 7B 0E            [ 1]  522 	ld	a, (0x0e, sp)
      000295 4A               [ 1]  523 	dec	a
      000296 26 0C            [ 1]  524 	jrne	00108$
                                    525 ;	../time.c: 155: if (LEAP_YEAR(year)) {
      000298 1E 0F            [ 2]  526 	ldw	x, (0x0f, sp)
      00029A 26 04            [ 1]  527 	jrne	00105$
                                    528 ;	../time.c: 156: monthLength=29;
      00029C A6 1D            [ 1]  529 	ld	a, #0x1d
      00029E 20 13            [ 2]  530 	jra	00109$
      0002A0                        531 00105$:
                                    532 ;	../time.c: 158: monthLength=28;
      0002A0 A6 1C            [ 1]  533 	ld	a, #0x1c
      0002A2 20 0F            [ 2]  534 	jra	00109$
      0002A4                        535 00108$:
                                    536 ;	../time.c: 161: monthLength = monthDays[month];
      0002A4 5F               [ 1]  537 	clrw	x
      0002A5 7B 0E            [ 1]  538 	ld	a, (0x0e, sp)
      0002A7 97               [ 1]  539 	ld	xl, a
      0002A8 1Cr00r00         [ 2]  540 	addw	x, #(_monthDays + 0)
      0002AB 1F 0C            [ 2]  541 	ldw	(0x0c, sp), x
      0002AD 4F               [ 1]  542 	clr	a
      0002AE A9s00            [ 1]  543 	adc	a, #((_monthDays + 0) >> 16)
      0002B0 1E 0C            [ 2]  544 	ldw	x, (0x0c, sp)
      0002B2 F6               [ 1]  545 	ld	a, (x)
      0002B3                        546 00109$:
                                    547 ;	../time.c: 164: if (epoch>=monthLength) {
      0002B3 6B 0D            [ 1]  548 	ld	(0x0d, sp), a
      0002B5 0F 0C            [ 1]  549 	clr	(0x0c, sp)
      0002B7 0F 0B            [ 1]  550 	clr	(0x0b, sp)
      0002B9 0F 0A            [ 1]  551 	clr	(0x0a, sp)
      0002BB 1E 08            [ 2]  552 	ldw	x, (0x08, sp)
      0002BD 13 0C            [ 2]  553 	cpw	x, (0x0c, sp)
      0002BF 7B 07            [ 1]  554 	ld	a, (0x07, sp)
      0002C1 12 0B            [ 1]  555 	sbc	a, (0x0b, sp)
      0002C3 7B 06            [ 1]  556 	ld	a, (0x06, sp)
      0002C5 12 0A            [ 1]  557 	sbc	a, (0x0a, sp)
      0002C7 25 1B            [ 1]  558 	jrc	00113$
                                    559 ;	../time.c: 165: epoch-=monthLength;
      0002C9 16 08            [ 2]  560 	ldw	y, (0x08, sp)
      0002CB 72 F2 0C         [ 2]  561 	subw	y, (0x0c, sp)
      0002CE 7B 07            [ 1]  562 	ld	a, (0x07, sp)
      0002D0 12 0B            [ 1]  563 	sbc	a, (0x0b, sp)
      0002D2 97               [ 1]  564 	ld	xl, a
      0002D3 7B 06            [ 1]  565 	ld	a, (0x06, sp)
      0002D5 12 0A            [ 1]  566 	sbc	a, (0x0a, sp)
      0002D7 95               [ 1]  567 	ld	xh, a
      0002D8 17 08            [ 2]  568 	ldw	(0x08, sp), y
      0002DA 1F 06            [ 2]  569 	ldw	(0x06, sp), x
                                    570 ;	../time.c: 153: for (month=0; month<12; month++) {
      0002DC 0C 0E            [ 1]  571 	inc	(0x0e, sp)
      0002DE 7B 0E            [ 1]  572 	ld	a, (0x0e, sp)
      0002E0 A1 0C            [ 1]  573 	cp	a, #0x0c
      0002E2 25 AF            [ 1]  574 	jrc	00114$
      0002E4                        575 00113$:
                                    576 ;	../time.c: 170: lastTime.tm_mon=month;
      0002E4 AEr00r24         [ 2]  577 	ldw	x, #(_lastTime + 0)+4
      0002E7 7B 0E            [ 1]  578 	ld	a, (0x0e, sp)
      0002E9 F7               [ 1]  579 	ld	(x), a
                                    580 ;	../time.c: 171: lastTime.tm_mday=epoch+1;
      0002EA AEr00r23         [ 2]  581 	ldw	x, #(_lastTime + 0)+3
      0002ED 7B 09            [ 1]  582 	ld	a, (0x09, sp)
      0002EF 4C               [ 1]  583 	inc	a
      0002F0 F7               [ 1]  584 	ld	(x), a
                                    585 ;	../time.c: 173: lastTime.tm_isdst=0;
      0002F1 AEr00r2A         [ 2]  586 	ldw	x, #(_lastTime + 0)+10
      0002F4 7F               [ 1]  587 	clr	(x)
                                    588 ;	../time.c: 175: return &lastTime;
      0002F5 AEr00r20         [ 2]  589 	ldw	x, #(_lastTime + 0)
                                    590 ;	../time.c: 176: }
      0002F8 5B 10            [ 2]  591 	addw	sp, #16
      0002FA 87               [ 5]  592 	retf
                                    593 ;	../time.c: 179: time_t mktime(struct tm *timeptr) {
                                    594 ;	-----------------------------------------
                                    595 ;	 function mktime
                                    596 ;	-----------------------------------------
      0002FB                        597 _mktime:
      0002FB 52 12            [ 2]  598 	sub	sp, #18
                                    599 ;	../time.c: 180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      0002FD 16 16            [ 2]  600 	ldw	y, (0x16, sp)
      0002FF 17 01            [ 2]  601 	ldw	(0x01, sp), y
      000301 93               [ 1]  602 	ldw	x, y
      000302 EE 05            [ 2]  603 	ldw	x, (0x5, x)
      000304 1C 07 6C         [ 2]  604 	addw	x, #0x076c
      000307 1F 0B            [ 2]  605 	ldw	(0x0b, sp), x
      000309 1E 01            [ 2]  606 	ldw	x, (0x01, sp)
      00030B E6 04            [ 1]  607 	ld	a, (0x4, x)
      00030D 5F               [ 1]  608 	clrw	x
      00030E 97               [ 1]  609 	ld	xl, a
      00030F 1F 03            [ 2]  610 	ldw	(0x03, sp), x
                                    611 ;	../time.c: 183: CheckTime(timeptr);
      000311 1E 01            [ 2]  612 	ldw	x, (0x01, sp)
      000313 89               [ 2]  613 	pushw	x
      000314 8Ds00r00r3C      [ 5]  614 	callf	_CheckTime
      000318 5B 02            [ 2]  615 	addw	sp, #2
                                    616 ;	../time.c: 186: seconds= (year-1970)*(60*60*24L*365);
      00031A 1E 0B            [ 2]  617 	ldw	x, (0x0b, sp)
      00031C 1D 07 B2         [ 2]  618 	subw	x, #0x07b2
      00031F 90 5F            [ 1]  619 	clrw	y
      000321 5D               [ 2]  620 	tnzw	x
      000322 2A 02            [ 1]  621 	jrpl	00154$
      000324 90 5A            [ 2]  622 	decw	y
      000326                        623 00154$:
      000326 89               [ 2]  624 	pushw	x
      000327 90 89            [ 2]  625 	pushw	y
      000329 4B 80            [ 1]  626 	push	#0x80
      00032B 4B 33            [ 1]  627 	push	#0x33
      00032D 4B E1            [ 1]  628 	push	#0xe1
      00032F 4B 01            [ 1]  629 	push	#0x01
      000331 8Ds00r00r00      [ 5]  630 	callf	__mullong
      000335 5B 08            [ 2]  631 	addw	sp, #8
                                    632 ;	../time.c: 189: for (i=1970; i<year; i++) {
      000337 1F 11            [ 2]  633 	ldw	(0x11, sp), x
      000339 17 0F            [ 2]  634 	ldw	(0x0f, sp), y
      00033B AE 07 B2         [ 2]  635 	ldw	x, #0x07b2
      00033E 1F 0D            [ 2]  636 	ldw	(0x0d, sp), x
      000340                        637 00110$:
      000340 1E 0D            [ 2]  638 	ldw	x, (0x0d, sp)
      000342 13 0B            [ 2]  639 	cpw	x, (0x0b, sp)
      000344 2E 2A            [ 1]  640 	jrsge	00124$
                                    641 ;	../time.c: 190: if (LEAP_YEAR(i)) {
      000346 4B 04            [ 1]  642 	push	#0x04
      000348 4B 00            [ 1]  643 	push	#0x00
      00034A 1E 0F            [ 2]  644 	ldw	x, (0x0f, sp)
      00034C 89               [ 2]  645 	pushw	x
      00034D 8Ds00r00r00      [ 5]  646 	callf	__modsint
      000351 5B 04            [ 2]  647 	addw	sp, #4
      000353 5D               [ 2]  648 	tnzw	x
      000354 26 13            [ 1]  649 	jrne	00111$
                                    650 ;	../time.c: 191: seconds+= 60*60*24L;
      000356 1E 11            [ 2]  651 	ldw	x, (0x11, sp)
      000358 1C 51 80         [ 2]  652 	addw	x, #0x5180
      00035B 1F 11            [ 2]  653 	ldw	(0x11, sp), x
      00035D 7B 10            [ 1]  654 	ld	a, (0x10, sp)
      00035F A9 01            [ 1]  655 	adc	a, #0x01
      000361 6B 10            [ 1]  656 	ld	(0x10, sp), a
      000363 7B 0F            [ 1]  657 	ld	a, (0x0f, sp)
      000365 A9 00            [ 1]  658 	adc	a, #0x00
      000367 6B 0F            [ 1]  659 	ld	(0x0f, sp), a
      000369                        660 00111$:
                                    661 ;	../time.c: 189: for (i=1970; i<year; i++) {
      000369 1E 0D            [ 2]  662 	ldw	x, (0x0d, sp)
      00036B 5C               [ 1]  663 	incw	x
      00036C 1F 0D            [ 2]  664 	ldw	(0x0d, sp), x
      00036E 20 D0            [ 2]  665 	jra	00110$
      000370                        666 00124$:
      000370 16 11            [ 2]  667 	ldw	y, (0x11, sp)
      000372 17 07            [ 2]  668 	ldw	(0x07, sp), y
      000374 16 0F            [ 2]  669 	ldw	y, (0x0f, sp)
      000376 17 05            [ 2]  670 	ldw	(0x05, sp), y
                                    671 ;	../time.c: 196: for (i=0; i<month; i++) {
      000378 4B 04            [ 1]  672 	push	#0x04
      00037A 4B 00            [ 1]  673 	push	#0x00
      00037C 1E 0D            [ 2]  674 	ldw	x, (0x0d, sp)
      00037E 89               [ 2]  675 	pushw	x
      00037F 8Ds00r00r00      [ 5]  676 	callf	__modsint
      000383 5B 04            [ 2]  677 	addw	sp, #4
      000385 1F 09            [ 2]  678 	ldw	(0x09, sp), x
      000387 90 5F            [ 1]  679 	clrw	y
      000389                        680 00113$:
      000389 51               [ 1]  681 	exgw	x, y
      00038A 13 03            [ 2]  682 	cpw	x, (0x03, sp)
      00038C 51               [ 1]  683 	exgw	x, y
      00038D 2E 68            [ 1]  684 	jrsge	00108$
                                    685 ;	../time.c: 197: if (i==1 && LEAP_YEAR(year)) { 
      00038F 90 A3 00 01      [ 2]  686 	cpw	y, #0x0001
      000393 26 1B            [ 1]  687 	jrne	00105$
      000395 1E 09            [ 2]  688 	ldw	x, (0x09, sp)
      000397 26 17            [ 1]  689 	jrne	00105$
                                    690 ;	../time.c: 198: seconds+= 60*60*24L*29;
      000399 1E 07            [ 2]  691 	ldw	x, (0x07, sp)
      00039B 1C 3B 80         [ 2]  692 	addw	x, #0x3b80
      00039E 1F 11            [ 2]  693 	ldw	(0x11, sp), x
      0003A0 1E 05            [ 2]  694 	ldw	x, (0x05, sp)
      0003A2 24 01            [ 1]  695 	jrnc	00163$
      0003A4 5C               [ 1]  696 	incw	x
      0003A5                        697 00163$:
      0003A5 1C 00 26         [ 2]  698 	addw	x, #0x0026
      0003A8 1F 05            [ 2]  699 	ldw	(0x05, sp), x
      0003AA 1E 11            [ 2]  700 	ldw	x, (0x11, sp)
      0003AC 1F 07            [ 2]  701 	ldw	(0x07, sp), x
      0003AE 20 43            [ 2]  702 	jra	00114$
      0003B0                        703 00105$:
                                    704 ;	../time.c: 200: seconds+= 60*60*24L*monthDays[i];
      0003B0 93               [ 1]  705 	ldw	x, y
      0003B1 1Cr00r00         [ 2]  706 	addw	x, #(_monthDays + 0)
      0003B4 4F               [ 1]  707 	clr	a
      0003B5 A9s00            [ 1]  708 	adc	a, #((_monthDays + 0) >> 16)
      0003B7 F6               [ 1]  709 	ld	a, (x)
      0003B8 97               [ 1]  710 	ld	xl, a
      0003B9 6B 12            [ 1]  711 	ld	(0x12, sp), a
      0003BB 41               [ 1]  712 	exg	a, xl
      0003BC 0F 11            [ 1]  713 	clr	(0x11, sp)
      0003BE 0F 10            [ 1]  714 	clr	(0x10, sp)
      0003C0 0F 0F            [ 1]  715 	clr	(0x0f, sp)
      0003C2 90 89            [ 2]  716 	pushw	y
      0003C4 1E 13            [ 2]  717 	ldw	x, (0x13, sp)
      0003C6 89               [ 2]  718 	pushw	x
      0003C7 1E 13            [ 2]  719 	ldw	x, (0x13, sp)
      0003C9 89               [ 2]  720 	pushw	x
      0003CA 4B 80            [ 1]  721 	push	#0x80
      0003CC 4B 51            [ 1]  722 	push	#0x51
      0003CE 4B 01            [ 1]  723 	push	#0x01
      0003D0 4B 00            [ 1]  724 	push	#0x00
      0003D2 8Ds00r00r00      [ 5]  725 	callf	__mullong
      0003D6 5B 08            [ 2]  726 	addw	sp, #8
      0003D8 1F 0F            [ 2]  727 	ldw	(0x0f, sp), x
      0003DA 17 0D            [ 2]  728 	ldw	(0x0d, sp), y
      0003DC 90 85            [ 2]  729 	popw	y
      0003DE 1E 07            [ 2]  730 	ldw	x, (0x07, sp)
      0003E0 72 FB 0D         [ 2]  731 	addw	x, (0x0d, sp)
      0003E3 1F 11            [ 2]  732 	ldw	(0x11, sp), x
      0003E5 1E 05            [ 2]  733 	ldw	x, (0x05, sp)
      0003E7 24 01            [ 1]  734 	jrnc	00164$
      0003E9 5C               [ 1]  735 	incw	x
      0003EA                        736 00164$:
      0003EA 72 FB 0B         [ 2]  737 	addw	x, (0x0b, sp)
      0003ED 1F 05            [ 2]  738 	ldw	(0x05, sp), x
      0003EF 1E 11            [ 2]  739 	ldw	x, (0x11, sp)
      0003F1 1F 07            [ 2]  740 	ldw	(0x07, sp), x
      0003F3                        741 00114$:
                                    742 ;	../time.c: 196: for (i=0; i<month; i++) {
      0003F3 90 5C            [ 1]  743 	incw	y
      0003F5 20 92            [ 2]  744 	jra	00113$
      0003F7                        745 00108$:
                                    746 ;	../time.c: 204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      0003F7 1E 01            [ 2]  747 	ldw	x, (0x01, sp)
      0003F9 E6 03            [ 1]  748 	ld	a, (0x3, x)
      0003FB 5F               [ 1]  749 	clrw	x
      0003FC 97               [ 1]  750 	ld	xl, a
      0003FD 5A               [ 2]  751 	decw	x
      0003FE 90 5F            [ 1]  752 	clrw	y
      000400 5D               [ 2]  753 	tnzw	x
      000401 2A 02            [ 1]  754 	jrpl	00165$
      000403 90 5A            [ 2]  755 	decw	y
      000405                        756 00165$:
      000405 89               [ 2]  757 	pushw	x
      000406 90 89            [ 2]  758 	pushw	y
      000408 4B 80            [ 1]  759 	push	#0x80
      00040A 4B 51            [ 1]  760 	push	#0x51
      00040C 4B 01            [ 1]  761 	push	#0x01
      00040E 4B 00            [ 1]  762 	push	#0x00
      000410 8Ds00r00r00      [ 5]  763 	callf	__mullong
      000414 5B 08            [ 2]  764 	addw	sp, #8
      000416 51               [ 1]  765 	exgw	x, y
      000417 72 F9 07         [ 2]  766 	addw	y, (0x07, sp)
      00041A 9F               [ 1]  767 	ld	a, xl
      00041B 19 06            [ 1]  768 	adc	a, (0x06, sp)
      00041D 02               [ 1]  769 	rlwa	x
      00041E 19 05            [ 1]  770 	adc	a, (0x05, sp)
      000420 95               [ 1]  771 	ld	xh, a
      000421 17 11            [ 2]  772 	ldw	(0x11, sp), y
      000423 1F 0F            [ 2]  773 	ldw	(0x0f, sp), x
                                    774 ;	../time.c: 205: seconds+= timeptr->tm_hour*60*60L;
      000425 1E 01            [ 2]  775 	ldw	x, (0x01, sp)
      000427 E6 02            [ 1]  776 	ld	a, (0x2, x)
      000429 5F               [ 1]  777 	clrw	x
      00042A 97               [ 1]  778 	ld	xl, a
      00042B 90 5F            [ 1]  779 	clrw	y
      00042D 89               [ 2]  780 	pushw	x
      00042E 90 89            [ 2]  781 	pushw	y
      000430 4B 10            [ 1]  782 	push	#0x10
      000432 4B 0E            [ 1]  783 	push	#0x0e
      000434 5F               [ 1]  784 	clrw	x
      000435 89               [ 2]  785 	pushw	x
      000436 8Ds00r00r00      [ 5]  786 	callf	__mullong
      00043A 5B 08            [ 2]  787 	addw	sp, #8
      00043C 90 9F            [ 1]  788 	ld	a, yl
      00043E 72 FB 11         [ 2]  789 	addw	x, (0x11, sp)
      000441 19 10            [ 1]  790 	adc	a, (0x10, sp)
      000443 90 02            [ 1]  791 	rlwa	y
      000445 19 0F            [ 1]  792 	adc	a, (0x0f, sp)
      000447 90 95            [ 1]  793 	ld	yh, a
      000449 1F 0D            [ 2]  794 	ldw	(0x0d, sp), x
                                    795 ;	../time.c: 206: seconds+= timeptr->tm_min*60;
      00044B 1E 01            [ 2]  796 	ldw	x, (0x01, sp)
      00044D E6 01            [ 1]  797 	ld	a, (0x1, x)
      00044F 5F               [ 1]  798 	clrw	x
      000450 97               [ 1]  799 	ld	xl, a
      000451 89               [ 2]  800 	pushw	x
      000452 58               [ 2]  801 	sllw	x
      000453 58               [ 2]  802 	sllw	x
      000454 58               [ 2]  803 	sllw	x
      000455 58               [ 2]  804 	sllw	x
      000456 72 F0 01         [ 2]  805 	subw	x, (1, sp)
      000459 58               [ 2]  806 	sllw	x
      00045A 58               [ 2]  807 	sllw	x
      00045B 5B 02            [ 2]  808 	addw	sp, #2
      00045D 1F 11            [ 2]  809 	ldw	(0x11, sp), x
      00045F 7B 11            [ 1]  810 	ld	a, (0x11, sp)
      000461 49               [ 1]  811 	rlc	a
      000462 4F               [ 1]  812 	clr	a
      000463 A2 00            [ 1]  813 	sbc	a, #0x00
      000465 6B 10            [ 1]  814 	ld	(0x10, sp), a
      000467 6B 0F            [ 1]  815 	ld	(0x0f, sp), a
      000469 1E 0D            [ 2]  816 	ldw	x, (0x0d, sp)
      00046B 72 FB 11         [ 2]  817 	addw	x, (0x11, sp)
      00046E 90 9F            [ 1]  818 	ld	a, yl
      000470 19 10            [ 1]  819 	adc	a, (0x10, sp)
      000472 88               [ 1]  820 	push	a
      000473 90 9E            [ 1]  821 	ld	a, yh
      000475 19 10            [ 1]  822 	adc	a, (0x10, sp)
      000477 90 95            [ 1]  823 	ld	yh, a
      000479 84               [ 1]  824 	pop	a
      00047A 1F 11            [ 2]  825 	ldw	(0x11, sp), x
      00047C 6B 10            [ 1]  826 	ld	(0x10, sp), a
                                    827 ;	../time.c: 207: seconds+= timeptr->tm_sec;
      00047E 1E 01            [ 2]  828 	ldw	x, (0x01, sp)
      000480 F6               [ 1]  829 	ld	a, (x)
      000481 5F               [ 1]  830 	clrw	x
      000482 97               [ 1]  831 	ld	xl, a
      000483 1F 0D            [ 2]  832 	ldw	(0x0d, sp), x
      000485 7B 0D            [ 1]  833 	ld	a, (0x0d, sp)
      000487 49               [ 1]  834 	rlc	a
      000488 4F               [ 1]  835 	clr	a
      000489 A2 00            [ 1]  836 	sbc	a, #0x00
      00048B 6B 0C            [ 1]  837 	ld	(0x0c, sp), a
      00048D 6B 0B            [ 1]  838 	ld	(0x0b, sp), a
      00048F 1E 11            [ 2]  839 	ldw	x, (0x11, sp)
      000491 72 FB 0D         [ 2]  840 	addw	x, (0x0d, sp)
      000494 7B 10            [ 1]  841 	ld	a, (0x10, sp)
      000496 19 0C            [ 1]  842 	adc	a, (0x0c, sp)
      000498 90 02            [ 1]  843 	rlwa	y
      00049A 19 0B            [ 1]  844 	adc	a, (0x0b, sp)
      00049C 90 95            [ 1]  845 	ld	yh, a
                                    846 ;	../time.c: 208: return seconds;
                                    847 ;	../time.c: 209: }
      00049E 5B 12            [ 2]  848 	addw	sp, #18
      0004A0 87               [ 5]  849 	retf
                                    850 	.area CODE
                                    851 	.area CONST
      000000                        852 _monthDays:
      000000 1F                     853 	.db #0x1f	; 31
      000001 1C                     854 	.db #0x1c	; 28
      000002 1F                     855 	.db #0x1f	; 31
      000003 1E                     856 	.db #0x1e	; 30
      000004 1F                     857 	.db #0x1f	; 31
      000005 1E                     858 	.db #0x1e	; 30
      000006 1F                     859 	.db #0x1f	; 31
      000007 1F                     860 	.db #0x1f	; 31
      000008 1E                     861 	.db #0x1e	; 30
      000009 1F                     862 	.db #0x1f	; 31
      00000A 1E                     863 	.db #0x1e	; 30
      00000B 1F                     864 	.db #0x1f	; 31
      00000C                        865 ___month:
      00000Cr00r51                  866 	.dw __str_1
      00000Er00r55                  867 	.dw __str_2
      000010r00r59                  868 	.dw __str_3
      000012r00r5D                  869 	.dw __str_4
      000014r00r61                  870 	.dw __str_5
      000016r00r65                  871 	.dw __str_6
      000018r00r69                  872 	.dw __str_7
      00001Ar00r6D                  873 	.dw __str_8
      00001Cr00r71                  874 	.dw __str_9
      00001Er00r75                  875 	.dw __str_10
      000020r00r79                  876 	.dw __str_11
      000022r00r7D                  877 	.dw __str_12
      000024                        878 ___day:
      000024r00r81                  879 	.dw __str_13
      000026r00r85                  880 	.dw __str_14
      000028r00r89                  881 	.dw __str_15
      00002Ar00r8D                  882 	.dw __str_16
      00002Cr00r91                  883 	.dw __str_17
      00002Er00r95                  884 	.dw __str_18
      000030r00r99                  885 	.dw __str_19
                                    886 	.area CONST
      000032                        887 ___str_0:
      000032 25 73 20 25 73 20 25   888 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                     889 	.db 0x0a
      000050 00                     890 	.db 0x00
                                    891 	.area CODE
                                    892 	.area CONST
      000051                        893 __str_1:
      000051 4A 61 6E               894 	.ascii "Jan"
      000054 00                     895 	.db 0x00
                                    896 	.area CODE
                                    897 	.area CONST
      000055                        898 __str_2:
      000055 46 65 62               899 	.ascii "Feb"
      000058 00                     900 	.db 0x00
                                    901 	.area CODE
                                    902 	.area CONST
      000059                        903 __str_3:
      000059 4D 61 72               904 	.ascii "Mar"
      00005C 00                     905 	.db 0x00
                                    906 	.area CODE
                                    907 	.area CONST
      00005D                        908 __str_4:
      00005D 41 70 72               909 	.ascii "Apr"
      000060 00                     910 	.db 0x00
                                    911 	.area CODE
                                    912 	.area CONST
      000061                        913 __str_5:
      000061 4D 61 79               914 	.ascii "May"
      000064 00                     915 	.db 0x00
                                    916 	.area CODE
                                    917 	.area CONST
      000065                        918 __str_6:
      000065 4A 75 6E               919 	.ascii "Jun"
      000068 00                     920 	.db 0x00
                                    921 	.area CODE
                                    922 	.area CONST
      000069                        923 __str_7:
      000069 4A 75 6C               924 	.ascii "Jul"
      00006C 00                     925 	.db 0x00
                                    926 	.area CODE
                                    927 	.area CONST
      00006D                        928 __str_8:
      00006D 41 75 67               929 	.ascii "Aug"
      000070 00                     930 	.db 0x00
                                    931 	.area CODE
                                    932 	.area CONST
      000071                        933 __str_9:
      000071 53 65 70               934 	.ascii "Sep"
      000074 00                     935 	.db 0x00
                                    936 	.area CODE
                                    937 	.area CONST
      000075                        938 __str_10:
      000075 4F 63 74               939 	.ascii "Oct"
      000078 00                     940 	.db 0x00
                                    941 	.area CODE
                                    942 	.area CONST
      000079                        943 __str_11:
      000079 4E 6F 76               944 	.ascii "Nov"
      00007C 00                     945 	.db 0x00
                                    946 	.area CODE
                                    947 	.area CONST
      00007D                        948 __str_12:
      00007D 44 65 63               949 	.ascii "Dec"
      000080 00                     950 	.db 0x00
                                    951 	.area CODE
                                    952 	.area CONST
      000081                        953 __str_13:
      000081 53 75 6E               954 	.ascii "Sun"
      000084 00                     955 	.db 0x00
                                    956 	.area CODE
                                    957 	.area CONST
      000085                        958 __str_14:
      000085 4D 6F 6E               959 	.ascii "Mon"
      000088 00                     960 	.db 0x00
                                    961 	.area CODE
                                    962 	.area CONST
      000089                        963 __str_15:
      000089 54 75 65               964 	.ascii "Tue"
      00008C 00                     965 	.db 0x00
                                    966 	.area CODE
                                    967 	.area CONST
      00008D                        968 __str_16:
      00008D 57 65 64               969 	.ascii "Wed"
      000090 00                     970 	.db 0x00
                                    971 	.area CODE
                                    972 	.area CONST
      000091                        973 __str_17:
      000091 54 68 75               974 	.ascii "Thu"
      000094 00                     975 	.db 0x00
                                    976 	.area CODE
                                    977 	.area CONST
      000095                        978 __str_18:
      000095 46 72 69               979 	.ascii "Fri"
      000098 00                     980 	.db 0x00
                                    981 	.area CODE
                                    982 	.area CONST
      000099                        983 __str_19:
      000099 53 61 74               984 	.ascii "Sat"
      00009C 00                     985 	.db 0x00
                                    986 	.area CODE
                                    987 	.area INITIALIZER
                                    988 	.area CABS (ABS)
