                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module atol
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atol
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../atol.c: 34: long int atol(const char *nptr)
                                     50 ;	-----------------------------------------
                                     51 ;	 function atol
                                     52 ;	-----------------------------------------
      000000                         53 _atol:
      000000 52 09            [ 2]   54 	sub	sp, #9
                                     55 ;	../atol.c: 36: long int ret = 0;
      000002 5F               [ 1]   56 	clrw	x
      000003 1F 03            [ 2]   57 	ldw	(0x03, sp), x
      000005 1F 01            [ 2]   58 	ldw	(0x01, sp), x
                                     59 ;	../atol.c: 39: while (isblank (*nptr))
      000007 16 0D            [ 2]   60 	ldw	y, (0x0d, sp)
      000009 17 07            [ 2]   61 	ldw	(0x07, sp), y
      00000B                         62 00101$:
      00000B 1E 07            [ 2]   63 	ldw	x, (0x07, sp)
      00000D F6               [ 1]   64 	ld	a, (x)
      00000E 6B 09            [ 1]   65 	ld	(0x09, sp), a
                                     66 ;	../atol.c: 40: nptr++;
      000010 1E 07            [ 2]   67 	ldw	x, (0x07, sp)
      000012 5C               [ 1]   68 	incw	x
                                     69 ;	./../../include/ctype.h: 53: return ((unsigned char)c == ' ' || (unsigned char)c == '\t');
      000013 A1 20            [ 1]   70 	cp	a, #0x20
      000015 27 04            [ 1]   71 	jreq	00115$
      000017 A1 09            [ 1]   72 	cp	a, #0x09
      000019 26 04            [ 1]   73 	jrne	00131$
      00001B                         74 00115$:
                                     75 ;	../atol.c: 40: nptr++;
      00001B 1F 07            [ 2]   76 	ldw	(0x07, sp), x
      00001D 20 EC            [ 2]   77 	jra	00101$
      00001F                         78 00131$:
      00001F 16 07            [ 2]   79 	ldw	y, (0x07, sp)
      000021 17 0D            [ 2]   80 	ldw	(0x0d, sp), y
                                     81 ;	../atol.c: 42: neg = (*nptr == '-');
      000023 7B 09            [ 1]   82 	ld	a, (0x09, sp)
      000025 A0 2D            [ 1]   83 	sub	a, #0x2d
      000027 26 02            [ 1]   84 	jrne	00168$
      000029 4C               [ 1]   85 	inc	a
      00002A 21                      86 	.byte 0x21
      00002B                         87 00168$:
      00002B 4F               [ 1]   88 	clr	a
      00002C                         89 00169$:
                                     90 ;	../atol.c: 44: if (*nptr == '-' || *nptr == '+')
      00002C 6B 05            [ 1]   91 	ld	(0x05, sp), a
      00002E 26 06            [ 1]   92 	jrne	00104$
      000030 7B 09            [ 1]   93 	ld	a, (0x09, sp)
      000032 A1 2B            [ 1]   94 	cp	a, #0x2b
      000034 26 02            [ 1]   95 	jrne	00129$
      000036                         96 00104$:
                                     97 ;	../atol.c: 45: nptr++;
      000036 1F 0D            [ 2]   98 	ldw	(0x0d, sp), x
                                     99 ;	../atol.c: 47: while (isdigit (*nptr))
      000038                        100 00129$:
      000038 16 0D            [ 2]  101 	ldw	y, (0x0d, sp)
      00003A 17 08            [ 2]  102 	ldw	(0x08, sp), y
      00003C                        103 00107$:
      00003C 1E 08            [ 2]  104 	ldw	x, (0x08, sp)
      00003E F6               [ 1]  105 	ld	a, (x)
      00003F 6B 06            [ 1]  106 	ld	(0x06, sp), a
                                    107 ;	./../../include/ctype.h: 62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      000041 6B 07            [ 1]  108 	ld	(0x07, sp), a
      000043 A1 30            [ 1]  109 	cp	a, #0x30
      000045 25 3F            [ 1]  110 	jrc	00109$
      000047 7B 07            [ 1]  111 	ld	a, (0x07, sp)
      000049 A1 39            [ 1]  112 	cp	a, #0x39
      00004B 22 39            [ 1]  113 	jrugt	00109$
                                    114 ;	../atol.c: 48: ret = ret * 10 + (*(nptr++) - '0');
      00004D 1E 03            [ 2]  115 	ldw	x, (0x03, sp)
      00004F 89               [ 2]  116 	pushw	x
      000050 1E 03            [ 2]  117 	ldw	x, (0x03, sp)
      000052 89               [ 2]  118 	pushw	x
      000053 4B 0A            [ 1]  119 	push	#0x0a
      000055 5F               [ 1]  120 	clrw	x
      000056 89               [ 2]  121 	pushw	x
      000057 4B 00            [ 1]  122 	push	#0x00
      000059 8Ds00r00r00      [ 5]  123 	callf	__mullong
      00005D 5B 08            [ 2]  124 	addw	sp, #8
      00005F 1F 03            [ 2]  125 	ldw	(0x03, sp), x
      000061 17 01            [ 2]  126 	ldw	(0x01, sp), y
      000063 1E 08            [ 2]  127 	ldw	x, (0x08, sp)
      000065 5C               [ 1]  128 	incw	x
      000066 1F 08            [ 2]  129 	ldw	(0x08, sp), x
      000068 5F               [ 1]  130 	clrw	x
      000069 7B 06            [ 1]  131 	ld	a, (0x06, sp)
      00006B 97               [ 1]  132 	ld	xl, a
      00006C 1D 00 30         [ 2]  133 	subw	x, #0x0030
      00006F 51               [ 1]  134 	exgw	x, y
      000070 5F               [ 1]  135 	clrw	x
      000071 90 5D            [ 2]  136 	tnzw	y
      000073 2A 01            [ 1]  137 	jrpl	00177$
      000075 5A               [ 2]  138 	decw	x
      000076                        139 00177$:
      000076 72 F9 03         [ 2]  140 	addw	y, (0x03, sp)
      000079 9F               [ 1]  141 	ld	a, xl
      00007A 19 02            [ 1]  142 	adc	a, (0x02, sp)
      00007C 02               [ 1]  143 	rlwa	x
      00007D 19 01            [ 1]  144 	adc	a, (0x01, sp)
      00007F 95               [ 1]  145 	ld	xh, a
      000080 17 03            [ 2]  146 	ldw	(0x03, sp), y
      000082 1F 01            [ 2]  147 	ldw	(0x01, sp), x
      000084 20 B6            [ 2]  148 	jra	00107$
      000086                        149 00109$:
                                    150 ;	../atol.c: 50: return (neg ? -ret : ret); // Since -LONG_MIN is LONG_MIN in sdcc, the result value always turns out ok.
      000086 0D 05            [ 1]  151 	tnz	(0x05, sp)
      000088 27 10            [ 1]  152 	jreq	00120$
      00008A 16 03            [ 2]  153 	ldw	y, (0x03, sp)
      00008C 90 50            [ 2]  154 	negw	y
      00008E 1E 01            [ 2]  155 	ldw	x, (0x01, sp)
      000090 24 01            [ 1]  156 	jrnc	00179$
      000092 5C               [ 1]  157 	incw	x
      000093                        158 00179$:
      000093 50               [ 2]  159 	negw	x
      000094 17 08            [ 2]  160 	ldw	(0x08, sp), y
      000096 1F 06            [ 2]  161 	ldw	(0x06, sp), x
      000098 20 08            [ 2]  162 	jra	00121$
      00009A                        163 00120$:
      00009A 16 03            [ 2]  164 	ldw	y, (0x03, sp)
      00009C 17 08            [ 2]  165 	ldw	(0x08, sp), y
      00009E 16 01            [ 2]  166 	ldw	y, (0x01, sp)
      0000A0 17 06            [ 2]  167 	ldw	(0x06, sp), y
      0000A2                        168 00121$:
      0000A2 1E 08            [ 2]  169 	ldw	x, (0x08, sp)
      0000A4 16 06            [ 2]  170 	ldw	y, (0x06, sp)
                                    171 ;	../atol.c: 51: }
      0000A6 5B 09            [ 2]  172 	addw	sp, #9
      0000A8 87               [ 5]  173 	retf
                                    174 	.area CODE
                                    175 	.area CONST
                                    176 	.area INITIALIZER
                                    177 	.area CABS (ABS)
