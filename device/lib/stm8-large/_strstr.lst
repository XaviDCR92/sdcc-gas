                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _strstr
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strstr
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../_strstr.c: 31: char *strstr ( const char *str1, const char *str2 )
                                     50 ;	-----------------------------------------
                                     51 ;	 function strstr
                                     52 ;	-----------------------------------------
      000000                         53 _strstr:
      000000 52 0D            [ 2]   54 	sub	sp, #13
                                     55 ;	../_strstr.c: 33: const char *cp = str1;
      000002 16 11            [ 2]   56 	ldw	y, (0x11, sp)
      000004 17 01            [ 2]   57 	ldw	(0x01, sp), y
                                     58 ;	../_strstr.c: 37: if (!*str2)
      000006 16 13            [ 2]   59 	ldw	y, (0x13, sp)
      000008 17 03            [ 2]   60 	ldw	(0x03, sp), y
      00000A 93               [ 1]   61 	ldw	x, y
      00000B F6               [ 1]   62 	ld	a, (x)
      00000C 6B 0D            [ 1]   63 	ld	(0x0d, sp), a
      00000E 26 04            [ 1]   64 	jrne	00122$
                                     65 ;	../_strstr.c: 38: return ((char*)str1);
      000010 1E 01            [ 2]   66 	ldw	x, (0x01, sp)
      000012 20 51            [ 2]   67 	jra	00113$
                                     68 ;	../_strstr.c: 40: while (*cp)
      000014                         69 00122$:
      000014 16 01            [ 2]   70 	ldw	y, (0x01, sp)
      000016 17 08            [ 2]   71 	ldw	(0x08, sp), y
      000018                         72 00110$:
      000018 1E 08            [ 2]   73 	ldw	x, (0x08, sp)
      00001A F6               [ 1]   74 	ld	a, (x)
      00001B 27 47            [ 1]   75 	jreq	00112$
                                     76 ;	../_strstr.c: 43: s2 = str2;
      00001D 1E 03            [ 2]   77 	ldw	x, (0x03, sp)
                                     78 ;	../_strstr.c: 45: while (*s1 && *s2 && !(*s1-*s2))
      00001F 16 08            [ 2]   79 	ldw	y, (0x08, sp)
      000021 17 0A            [ 2]   80 	ldw	(0x0a, sp), y
      000023 1F 0C            [ 2]   81 	ldw	(0x0c, sp), x
      000025                         82 00105$:
      000025 1E 0A            [ 2]   83 	ldw	x, (0x0a, sp)
      000027 F6               [ 1]   84 	ld	a, (x)
      000028 6B 07            [ 1]   85 	ld	(0x07, sp), a
      00002A 1E 0C            [ 2]   86 	ldw	x, (0x0c, sp)
      00002C F6               [ 1]   87 	ld	a, (x)
      00002D 6B 05            [ 1]   88 	ld	(0x05, sp), a
      00002F 0D 07            [ 1]   89 	tnz	(0x07, sp)
      000031 27 20            [ 1]   90 	jreq	00107$
      000033 0D 05            [ 1]   91 	tnz	(0x05, sp)
      000035 27 1C            [ 1]   92 	jreq	00107$
      000037 5F               [ 1]   93 	clrw	x
      000038 7B 07            [ 1]   94 	ld	a, (0x07, sp)
      00003A 97               [ 1]   95 	ld	xl, a
      00003B 7B 05            [ 1]   96 	ld	a, (0x05, sp)
      00003D 6B 07            [ 1]   97 	ld	(0x07, sp), a
      00003F 0F 06            [ 1]   98 	clr	(0x06, sp)
      000041 72 F0 06         [ 2]   99 	subw	x, (0x06, sp)
      000044 5D               [ 2]  100 	tnzw	x
      000045 26 0C            [ 1]  101 	jrne	00107$
                                    102 ;	../_strstr.c: 46: s1++, s2++;
      000047 1E 0A            [ 2]  103 	ldw	x, (0x0a, sp)
      000049 5C               [ 1]  104 	incw	x
      00004A 1F 0A            [ 2]  105 	ldw	(0x0a, sp), x
      00004C 1E 0C            [ 2]  106 	ldw	x, (0x0c, sp)
      00004E 5C               [ 1]  107 	incw	x
      00004F 1F 0C            [ 2]  108 	ldw	(0x0c, sp), x
      000051 20 D2            [ 2]  109 	jra	00105$
      000053                        110 00107$:
                                    111 ;	../_strstr.c: 48: if (!*s2)
      000053 0D 05            [ 1]  112 	tnz	(0x05, sp)
      000055 26 04            [ 1]  113 	jrne	00109$
                                    114 ;	../_strstr.c: 49: return ((char*)cp);
      000057 1E 01            [ 2]  115 	ldw	x, (0x01, sp)
      000059 20 0A            [ 2]  116 	jra	00113$
      00005B                        117 00109$:
                                    118 ;	../_strstr.c: 51: cp++;
      00005B 1E 08            [ 2]  119 	ldw	x, (0x08, sp)
      00005D 5C               [ 1]  120 	incw	x
      00005E 1F 08            [ 2]  121 	ldw	(0x08, sp), x
      000060 1F 01            [ 2]  122 	ldw	(0x01, sp), x
      000062 20 B4            [ 2]  123 	jra	00110$
      000064                        124 00112$:
                                    125 ;	../_strstr.c: 54: return (NULL) ;
      000064 5F               [ 1]  126 	clrw	x
      000065                        127 00113$:
                                    128 ;	../_strstr.c: 55: }
      000065 5B 0D            [ 2]  129 	addw	sp, #13
      000067 87               [ 5]  130 	retf
                                    131 	.area CODE
                                    132 	.area CONST
                                    133 	.area INITIALIZER
                                    134 	.area CABS (ABS)
