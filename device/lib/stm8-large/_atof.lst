                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _atof
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atoi
                                     12 	.globl _toupper
                                     13 	.globl _isspace
                                     14 	.globl _atof
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; absolute external ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DABS (ABS)
                                     27 
                                     28 ; default segment ordering for linker
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area CONST
                                     33 	.area INITIALIZER
                                     34 	.area CODE
                                     35 
                                     36 ;--------------------------------------------------------
                                     37 ; global & static initialisations
                                     38 ;--------------------------------------------------------
                                     39 	.area HOME
                                     40 	.area GSINIT
                                     41 	.area GSFINAL
                                     42 	.area GSINIT
                                     43 ;--------------------------------------------------------
                                     44 ; Home
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
                                     47 	.area HOME
                                     48 ;--------------------------------------------------------
                                     49 ; code
                                     50 ;--------------------------------------------------------
                                     51 	.area CODE
                                     52 ;	../_atof.c: 33: float atof(const char * s)
                                     53 ;	-----------------------------------------
                                     54 ;	 function atof
                                     55 ;	-----------------------------------------
      000000                         56 _atof:
      000000 52 11            [ 2]   57 	sub	sp, #17
                                     58 ;	../_atof.c: 40: while (isspace(*s)) s++;
      000002 16 15            [ 2]   59 	ldw	y, (0x15, sp)
      000004 17 10            [ 2]   60 	ldw	(0x10, sp), y
      000006                         61 00101$:
      000006 1E 10            [ 2]   62 	ldw	x, (0x10, sp)
      000008 F6               [ 1]   63 	ld	a, (x)
      000009 5F               [ 1]   64 	clrw	x
      00000A 97               [ 1]   65 	ld	xl, a
      00000B 89               [ 2]   66 	pushw	x
      00000C 8Ds00r00r00      [ 5]   67 	callf	_isspace
      000010 5B 02            [ 2]   68 	addw	sp, #2
      000012 16 10            [ 2]   69 	ldw	y, (0x10, sp)
      000014 90 5C            [ 1]   70 	incw	y
      000016 5D               [ 2]   71 	tnzw	x
      000017 27 04            [ 1]   72 	jreq	00155$
      000019 17 10            [ 2]   73 	ldw	(0x10, sp), y
      00001B 20 E9            [ 2]   74 	jra	00101$
      00001D                         75 00155$:
      00001D 1E 10            [ 2]   76 	ldw	x, (0x10, sp)
      00001F 1F 15            [ 2]   77 	ldw	(0x15, sp), x
                                     78 ;	../_atof.c: 43: if (*s == '-')
      000021 1E 10            [ 2]   79 	ldw	x, (0x10, sp)
      000023 F6               [ 1]   80 	ld	a, (x)
      000024 A1 2D            [ 1]   81 	cp	a, #0x2d
      000026 26 08            [ 1]   82 	jrne	00107$
                                     83 ;	../_atof.c: 45: sign=1;
      000028 A6 01            [ 1]   84 	ld	a, #0x01
      00002A 6B 05            [ 1]   85 	ld	(0x05, sp), a
                                     86 ;	../_atof.c: 46: s++;
      00002C 17 15            [ 2]   87 	ldw	(0x15, sp), y
      00002E 20 08            [ 2]   88 	jra	00108$
      000030                         89 00107$:
                                     90 ;	../_atof.c: 50: sign=0;
      000030 0F 05            [ 1]   91 	clr	(0x05, sp)
                                     92 ;	../_atof.c: 51: if (*s == '+') s++;
      000032 A1 2B            [ 1]   93 	cp	a, #0x2b
      000034 26 02            [ 1]   94 	jrne	00108$
      000036 17 15            [ 2]   95 	ldw	(0x15, sp), y
      000038                         96 00108$:
                                     97 ;	../_atof.c: 55: for (value=0.0; isdigit(*s); s++)
      000038 5F               [ 1]   98 	clrw	x
      000039 1F 08            [ 2]   99 	ldw	(0x08, sp), x
      00003B 1F 06            [ 2]  100 	ldw	(0x06, sp), x
      00003D 16 15            [ 2]  101 	ldw	y, (0x15, sp)
      00003F 17 0C            [ 2]  102 	ldw	(0x0c, sp), y
      000041                        103 00126$:
      000041 1E 0C            [ 2]  104 	ldw	x, (0x0c, sp)
      000043 F6               [ 1]  105 	ld	a, (x)
      000044 6B 0E            [ 1]  106 	ld	(0x0e, sp), a
      000046 6B 0F            [ 1]  107 	ld	(0x0f, sp), a
      000048 1E 0C            [ 2]  108 	ldw	x, (0x0c, sp)
      00004A 5C               [ 1]  109 	incw	x
      00004B 1F 10            [ 2]  110 	ldw	(0x10, sp), x
                                    111 ;	./../../include/ctype.h: 62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      00004D 7B 0F            [ 1]  112 	ld	a, (0x0f, sp)
      00004F A1 30            [ 1]  113 	cp	a, #0x30
      000051 25 41            [ 1]  114 	jrc	00156$
      000053 A1 39            [ 1]  115 	cp	a, #0x39
      000055 22 3D            [ 1]  116 	jrugt	00156$
                                    117 ;	../_atof.c: 57: value=10.0*value+(*s-'0');
      000057 1E 08            [ 2]  118 	ldw	x, (0x08, sp)
      000059 89               [ 2]  119 	pushw	x
      00005A 1E 08            [ 2]  120 	ldw	x, (0x08, sp)
      00005C 89               [ 2]  121 	pushw	x
      00005D 5F               [ 1]  122 	clrw	x
      00005E 89               [ 2]  123 	pushw	x
      00005F 4B 20            [ 1]  124 	push	#0x20
      000061 4B 41            [ 1]  125 	push	#0x41
      000063 8Ds00r00r00      [ 5]  126 	callf	___fsmul
      000067 5B 08            [ 2]  127 	addw	sp, #8
      000069 1F 0C            [ 2]  128 	ldw	(0x0c, sp), x
      00006B 17 0A            [ 2]  129 	ldw	(0x0a, sp), y
      00006D 5F               [ 1]  130 	clrw	x
      00006E 7B 0E            [ 1]  131 	ld	a, (0x0e, sp)
      000070 97               [ 1]  132 	ld	xl, a
      000071 1D 00 30         [ 2]  133 	subw	x, #0x0030
      000074 89               [ 2]  134 	pushw	x
      000075 8Ds00r00r00      [ 5]  135 	callf	___sint2fs
      000079 5B 02            [ 2]  136 	addw	sp, #2
      00007B 89               [ 2]  137 	pushw	x
      00007C 90 89            [ 2]  138 	pushw	y
      00007E 1E 10            [ 2]  139 	ldw	x, (0x10, sp)
      000080 89               [ 2]  140 	pushw	x
      000081 1E 10            [ 2]  141 	ldw	x, (0x10, sp)
      000083 89               [ 2]  142 	pushw	x
      000084 8Ds00r00r00      [ 5]  143 	callf	___fsadd
      000088 5B 08            [ 2]  144 	addw	sp, #8
      00008A 1F 08            [ 2]  145 	ldw	(0x08, sp), x
      00008C 17 06            [ 2]  146 	ldw	(0x06, sp), y
                                    147 ;	../_atof.c: 55: for (value=0.0; isdigit(*s); s++)
      00008E 16 10            [ 2]  148 	ldw	y, (0x10, sp)
      000090 17 0C            [ 2]  149 	ldw	(0x0c, sp), y
      000092 20 AD            [ 2]  150 	jra	00126$
      000094                        151 00156$:
      000094 16 0C            [ 2]  152 	ldw	y, (0x0c, sp)
      000096 17 15            [ 2]  153 	ldw	(0x15, sp), y
                                    154 ;	../_atof.c: 61: if (*s == '.')
      000098 7B 0E            [ 1]  155 	ld	a, (0x0e, sp)
      00009A A1 2E            [ 1]  156 	cp	a, #0x2e
      00009C 26 72            [ 1]  157 	jrne	00112$
                                    158 ;	../_atof.c: 64: for (fraction=0.1; isdigit(*s); s++)
      00009E AE CC CD         [ 2]  159 	ldw	x, #0xcccd
      0000A1 1F 0C            [ 2]  160 	ldw	(0x0c, sp), x
      0000A3 AE 3D CC         [ 2]  161 	ldw	x, #0x3dcc
      0000A6 1F 0A            [ 2]  162 	ldw	(0x0a, sp), x
      0000A8                        163 00129$:
      0000A8 1E 10            [ 2]  164 	ldw	x, (0x10, sp)
      0000AA F6               [ 1]  165 	ld	a, (x)
      0000AB 6B 0E            [ 1]  166 	ld	(0x0e, sp), a
                                    167 ;	./../../include/ctype.h: 62: return ((unsigned char)c >= '0' && (unsigned char)c <= '9');
      0000AD 6B 0F            [ 1]  168 	ld	(0x0f, sp), a
      0000AF A1 30            [ 1]  169 	cp	a, #0x30
      0000B1 25 59            [ 1]  170 	jrc	00157$
      0000B3 7B 0F            [ 1]  171 	ld	a, (0x0f, sp)
      0000B5 A1 39            [ 1]  172 	cp	a, #0x39
      0000B7 22 53            [ 1]  173 	jrugt	00157$
                                    174 ;	../_atof.c: 66: value+=(*s-'0')*fraction;
      0000B9 5F               [ 1]  175 	clrw	x
      0000BA 7B 0E            [ 1]  176 	ld	a, (0x0e, sp)
      0000BC 97               [ 1]  177 	ld	xl, a
      0000BD 1D 00 30         [ 2]  178 	subw	x, #0x0030
      0000C0 89               [ 2]  179 	pushw	x
      0000C1 8Ds00r00r00      [ 5]  180 	callf	___sint2fs
      0000C5 5B 02            [ 2]  181 	addw	sp, #2
      0000C7 1F 03            [ 2]  182 	ldw	(0x03, sp), x
      0000C9 1E 0C            [ 2]  183 	ldw	x, (0x0c, sp)
      0000CB 89               [ 2]  184 	pushw	x
      0000CC 1E 0C            [ 2]  185 	ldw	x, (0x0c, sp)
      0000CE 89               [ 2]  186 	pushw	x
      0000CF 1E 07            [ 2]  187 	ldw	x, (0x07, sp)
      0000D1 89               [ 2]  188 	pushw	x
      0000D2 90 89            [ 2]  189 	pushw	y
      0000D4 8Ds00r00r00      [ 5]  190 	callf	___fsmul
      0000D8 5B 08            [ 2]  191 	addw	sp, #8
      0000DA 89               [ 2]  192 	pushw	x
      0000DB 90 89            [ 2]  193 	pushw	y
      0000DD 1E 0C            [ 2]  194 	ldw	x, (0x0c, sp)
      0000DF 89               [ 2]  195 	pushw	x
      0000E0 1E 0C            [ 2]  196 	ldw	x, (0x0c, sp)
      0000E2 89               [ 2]  197 	pushw	x
      0000E3 8Ds00r00r00      [ 5]  198 	callf	___fsadd
      0000E7 5B 08            [ 2]  199 	addw	sp, #8
      0000E9 1F 08            [ 2]  200 	ldw	(0x08, sp), x
      0000EB 17 06            [ 2]  201 	ldw	(0x06, sp), y
                                    202 ;	../_atof.c: 67: fraction*=0.1;
      0000ED 1E 0C            [ 2]  203 	ldw	x, (0x0c, sp)
      0000EF 89               [ 2]  204 	pushw	x
      0000F0 1E 0C            [ 2]  205 	ldw	x, (0x0c, sp)
      0000F2 89               [ 2]  206 	pushw	x
      0000F3 4B CD            [ 1]  207 	push	#0xcd
      0000F5 4B CC            [ 1]  208 	push	#0xcc
      0000F7 4B CC            [ 1]  209 	push	#0xcc
      0000F9 4B 3D            [ 1]  210 	push	#0x3d
      0000FB 8Ds00r00r00      [ 5]  211 	callf	___fsmul
      0000FF 5B 08            [ 2]  212 	addw	sp, #8
      000101 1F 0C            [ 2]  213 	ldw	(0x0c, sp), x
      000103 17 0A            [ 2]  214 	ldw	(0x0a, sp), y
                                    215 ;	../_atof.c: 64: for (fraction=0.1; isdigit(*s); s++)
      000105 1E 10            [ 2]  216 	ldw	x, (0x10, sp)
      000107 5C               [ 1]  217 	incw	x
      000108 1F 10            [ 2]  218 	ldw	(0x10, sp), x
      00010A 20 9C            [ 2]  219 	jra	00129$
      00010C                        220 00157$:
      00010C 16 10            [ 2]  221 	ldw	y, (0x10, sp)
      00010E 17 15            [ 2]  222 	ldw	(0x15, sp), y
      000110                        223 00112$:
                                    224 ;	../_atof.c: 72: if (toupper(*s)=='E')
      000110 16 15            [ 2]  225 	ldw	y, (0x15, sp)
      000112 17 10            [ 2]  226 	ldw	(0x10, sp), y
      000114 93               [ 1]  227 	ldw	x, y
      000115 F6               [ 1]  228 	ld	a, (x)
      000116 5F               [ 1]  229 	clrw	x
      000117 97               [ 1]  230 	ld	xl, a
      000118 89               [ 2]  231 	pushw	x
      000119 8Ds00r00r00      [ 5]  232 	callf	_toupper
      00011D 5B 02            [ 2]  233 	addw	sp, #2
      00011F A3 00 45         [ 2]  234 	cpw	x, #0x0045
      000122 26 4B            [ 1]  235 	jrne	00120$
                                    236 ;	../_atof.c: 74: s++;
      000124 1E 10            [ 2]  237 	ldw	x, (0x10, sp)
      000126 5C               [ 1]  238 	incw	x
                                    239 ;	../_atof.c: 75: iexp=(signed char)atoi(s);
      000127 1F 15            [ 2]  240 	ldw	(0x15, sp), x
      000129 89               [ 2]  241 	pushw	x
      00012A 8Ds00r00r00      [ 5]  242 	callf	_atoi
      00012E 5B 02            [ 2]  243 	addw	sp, #2
      000130 9F               [ 1]  244 	ld	a, xl
                                    245 ;	../_atof.c: 77: while(iexp!=0)
      000131                        246 00116$:
      000131 4D               [ 1]  247 	tnz	a
      000132 27 3B            [ 1]  248 	jreq	00120$
                                    249 ;	../_atof.c: 79: if(iexp<0)
      000134 4D               [ 1]  250 	tnz	a
      000135 2A 1D            [ 1]  251 	jrpl	00114$
                                    252 ;	../_atof.c: 81: value*=0.1;
      000137 88               [ 1]  253 	push	a
      000138 1E 09            [ 2]  254 	ldw	x, (0x09, sp)
      00013A 89               [ 2]  255 	pushw	x
      00013B 1E 09            [ 2]  256 	ldw	x, (0x09, sp)
      00013D 89               [ 2]  257 	pushw	x
      00013E 4B CD            [ 1]  258 	push	#0xcd
      000140 4B CC            [ 1]  259 	push	#0xcc
      000142 4B CC            [ 1]  260 	push	#0xcc
      000144 4B 3D            [ 1]  261 	push	#0x3d
      000146 8Ds00r00r00      [ 5]  262 	callf	___fsmul
      00014A 5B 08            [ 2]  263 	addw	sp, #8
      00014C 84               [ 1]  264 	pop	a
      00014D 1F 08            [ 2]  265 	ldw	(0x08, sp), x
      00014F 17 06            [ 2]  266 	ldw	(0x06, sp), y
                                    267 ;	../_atof.c: 82: iexp++;
      000151 4C               [ 1]  268 	inc	a
      000152 20 DD            [ 2]  269 	jra	00116$
      000154                        270 00114$:
                                    271 ;	../_atof.c: 86: value*=10.0;
      000154 88               [ 1]  272 	push	a
      000155 1E 09            [ 2]  273 	ldw	x, (0x09, sp)
      000157 89               [ 2]  274 	pushw	x
      000158 1E 09            [ 2]  275 	ldw	x, (0x09, sp)
      00015A 89               [ 2]  276 	pushw	x
      00015B 5F               [ 1]  277 	clrw	x
      00015C 89               [ 2]  278 	pushw	x
      00015D 4B 20            [ 1]  279 	push	#0x20
      00015F 4B 41            [ 1]  280 	push	#0x41
      000161 8Ds00r00r00      [ 5]  281 	callf	___fsmul
      000165 5B 08            [ 2]  282 	addw	sp, #8
      000167 84               [ 1]  283 	pop	a
      000168 1F 08            [ 2]  284 	ldw	(0x08, sp), x
      00016A 17 06            [ 2]  285 	ldw	(0x06, sp), y
                                    286 ;	../_atof.c: 87: iexp--;
      00016C 4A               [ 1]  287 	dec	a
      00016D 20 C2            [ 2]  288 	jra	00116$
      00016F                        289 00120$:
                                    290 ;	../_atof.c: 93: if(sign) value*=-1.0;
      00016F 0D 05            [ 1]  291 	tnz	(0x05, sp)
      000171 27 0B            [ 1]  292 	jreq	00122$
      000173 16 08            [ 2]  293 	ldw	y, (0x08, sp)
      000175 1E 06            [ 2]  294 	ldw	x, (0x06, sp)
      000177 58               [ 2]  295 	sllw	x
      000178 8C               [ 1]  296 	ccf
      000179 56               [ 2]  297 	rrcw	x
      00017A 17 08            [ 2]  298 	ldw	(0x08, sp), y
      00017C 1F 06            [ 2]  299 	ldw	(0x06, sp), x
      00017E                        300 00122$:
                                    301 ;	../_atof.c: 94: return (value);
      00017E 1E 08            [ 2]  302 	ldw	x, (0x08, sp)
      000180 16 06            [ 2]  303 	ldw	y, (0x06, sp)
                                    304 ;	../_atof.c: 95: }
      000182 5B 11            [ 2]  305 	addw	sp, #17
      000184 87               [ 5]  306 	retf
                                    307 	.area CODE
                                    308 	.area CONST
                                    309 	.area INITIALIZER
                                    310 	.area CABS (ABS)
