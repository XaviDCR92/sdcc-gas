                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module wcscmp
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wcscmp
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../wcscmp.c: 31: int wcscmp(const wchar_t *s1, const wchar_t *s2)
                                     50 ;	-----------------------------------------
                                     51 ;	 function wcscmp
                                     52 ;	-----------------------------------------
      000000                         53 _wcscmp:
      000000 52 0A            [ 2]   54 	sub	sp, #10
                                     55 ;	../wcscmp.c: 33: while(*s1 == *s2 && *s1)
      000002 16 0E            [ 2]   56 	ldw	y, (0x0e, sp)
      000004 1E 10            [ 2]   57 	ldw	x, (0x10, sp)
      000006 1F 09            [ 2]   58 	ldw	(0x09, sp), x
      000008                         59 00102$:
      000008 93               [ 1]   60 	ldw	x, y
      000009 E6 03            [ 1]   61 	ld	a, (0x3, x)
      00000B 6B 04            [ 1]   62 	ld	(0x04, sp), a
      00000D E6 02            [ 1]   63 	ld	a, (0x2, x)
      00000F 6B 03            [ 1]   64 	ld	(0x03, sp), a
      000011 FE               [ 2]   65 	ldw	x, (x)
      000012 1F 01            [ 2]   66 	ldw	(0x01, sp), x
      000014 1E 09            [ 2]   67 	ldw	x, (0x09, sp)
      000016 E6 03            [ 1]   68 	ld	a, (0x3, x)
      000018 6B 08            [ 1]   69 	ld	(0x08, sp), a
      00001A E6 02            [ 1]   70 	ld	a, (0x2, x)
      00001C 6B 07            [ 1]   71 	ld	(0x07, sp), a
      00001E FE               [ 2]   72 	ldw	x, (x)
      00001F 1F 05            [ 2]   73 	ldw	(0x05, sp), x
      000021 1E 03            [ 2]   74 	ldw	x, (0x03, sp)
      000023 13 07            [ 2]   75 	cpw	x, (0x07, sp)
      000025 26 1B            [ 1]   76 	jrne	00104$
      000027 1E 01            [ 2]   77 	ldw	x, (0x01, sp)
      000029 13 05            [ 2]   78 	cpw	x, (0x05, sp)
      00002B 26 15            [ 1]   79 	jrne	00104$
      00002D 1E 03            [ 2]   80 	ldw	x, (0x03, sp)
      00002F 26 04            [ 1]   81 	jrne	00140$
      000031 1E 01            [ 2]   82 	ldw	x, (0x01, sp)
      000033 27 0D            [ 1]   83 	jreq	00104$
      000035                         84 00140$:
                                     85 ;	../wcscmp.c: 34: s1++, s2++;
      000035 72 A9 00 04      [ 2]   86 	addw	y, #0x0004
      000039 1E 09            [ 2]   87 	ldw	x, (0x09, sp)
      00003B 1C 00 04         [ 2]   88 	addw	x, #0x0004
      00003E 1F 09            [ 2]   89 	ldw	(0x09, sp), x
      000040 20 C6            [ 2]   90 	jra	00102$
      000042                         91 00104$:
                                     92 ;	../wcscmp.c: 36: if(*s1 < *s2)
      000042 1E 03            [ 2]   93 	ldw	x, (0x03, sp)
      000044 13 07            [ 2]   94 	cpw	x, (0x07, sp)
      000046 7B 02            [ 1]   95 	ld	a, (0x02, sp)
      000048 12 06            [ 1]   96 	sbc	a, (0x06, sp)
      00004A 7B 01            [ 1]   97 	ld	a, (0x01, sp)
      00004C 12 05            [ 1]   98 	sbc	a, (0x05, sp)
      00004E 24 04            [ 1]   99 	jrnc	00106$
                                    100 ;	../wcscmp.c: 37: return(-1);
      000050 5F               [ 1]  101 	clrw	x
      000051 5A               [ 2]  102 	decw	x
      000052 20 12            [ 2]  103 	jra	00109$
      000054                        104 00106$:
                                    105 ;	../wcscmp.c: 38: if(*s1 > *s2)
      000054 1E 07            [ 2]  106 	ldw	x, (0x07, sp)
      000056 13 03            [ 2]  107 	cpw	x, (0x03, sp)
      000058 7B 06            [ 1]  108 	ld	a, (0x06, sp)
      00005A 12 02            [ 1]  109 	sbc	a, (0x02, sp)
      00005C 7B 05            [ 1]  110 	ld	a, (0x05, sp)
      00005E 12 01            [ 1]  111 	sbc	a, (0x01, sp)
      000060 24 03            [ 1]  112 	jrnc	00108$
                                    113 ;	../wcscmp.c: 39: return(1);
      000062 5F               [ 1]  114 	clrw	x
      000063 5C               [ 1]  115 	incw	x
                                    116 ;	../wcscmp.c: 40: return(0);
      000064 21                     117 	.byte 0x21
      000065                        118 00108$:
      000065 5F               [ 1]  119 	clrw	x
      000066                        120 00109$:
                                    121 ;	../wcscmp.c: 41: }
      000066 5B 0A            [ 2]  122 	addw	sp, #10
      000068 87               [ 5]  123 	retf
                                    124 	.area CODE
                                    125 	.area CONST
                                    126 	.area INITIALIZER
                                    127 	.area CABS (ABS)
