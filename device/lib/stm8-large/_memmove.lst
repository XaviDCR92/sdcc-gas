                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _memmove
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memmove
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../_memmove.c: 34: void * memmove (void * dst, const void * src, size_t acount)
                                     50 ;	-----------------------------------------
                                     51 ;	 function memmove
                                     52 ;	-----------------------------------------
      000000                         53 _memmove:
      000000 52 0A            [ 2]   54 	sub	sp, #10
                                     55 ;	../_memmove.c: 36: void * ret = dst;
      000002 16 0E            [ 2]   56 	ldw	y, (0x0e, sp)
      000004 17 03            [ 2]   57 	ldw	(0x03, sp), y
                                     58 ;	../_memmove.c: 40: if ((uintptr_t)src < (uintptr_t)dst) {
      000006 1E 10            [ 2]   59 	ldw	x, (0x10, sp)
      000008 16 0E            [ 2]   60 	ldw	y, (0x0e, sp)
      00000A 17 01            [ 2]   61 	ldw	(0x01, sp), y
                                     62 ;	../_memmove.c: 44: d = ((char *)dst)+acount-1;
      00000C 16 0E            [ 2]   63 	ldw	y, (0x0e, sp)
      00000E 17 05            [ 2]   64 	ldw	(0x05, sp), y
                                     65 ;	../_memmove.c: 45: s = ((char *)src)+acount-1;
      000010 16 10            [ 2]   66 	ldw	y, (0x10, sp)
      000012 17 07            [ 2]   67 	ldw	(0x07, sp), y
                                     68 ;	../_memmove.c: 46: while (acount--) {
      000014 16 12            [ 2]   69 	ldw	y, (0x12, sp)
      000016 17 09            [ 2]   70 	ldw	(0x09, sp), y
                                     71 ;	../_memmove.c: 40: if ((uintptr_t)src < (uintptr_t)dst) {
      000018 13 01            [ 2]   72 	cpw	x, (0x01, sp)
      00001A 24 2B            [ 1]   73 	jrnc	00108$
                                     74 ;	../_memmove.c: 44: d = ((char *)dst)+acount-1;
      00001C 1E 05            [ 2]   75 	ldw	x, (0x05, sp)
      00001E 72 FB 12         [ 2]   76 	addw	x, (0x12, sp)
      000021 5A               [ 2]   77 	decw	x
      000022 51               [ 1]   78 	exgw	x, y
                                     79 ;	../_memmove.c: 45: s = ((char *)src)+acount-1;
      000023 1E 07            [ 2]   80 	ldw	x, (0x07, sp)
      000025 72 FB 12         [ 2]   81 	addw	x, (0x12, sp)
      000028 5A               [ 2]   82 	decw	x
                                     83 ;	../_memmove.c: 46: while (acount--) {
      000029 1F 05            [ 2]   84 	ldw	(0x05, sp), x
      00002B 17 07            [ 2]   85 	ldw	(0x07, sp), y
      00002D 16 09            [ 2]   86 	ldw	y, (0x09, sp)
      00002F                         87 00101$:
      00002F 93               [ 1]   88 	ldw	x, y
      000030 90 5A            [ 2]   89 	decw	y
      000032 5D               [ 2]   90 	tnzw	x
      000033 27 37            [ 1]   91 	jreq	00109$
                                     92 ;	../_memmove.c: 47: *d-- = *s--;
      000035 1E 05            [ 2]   93 	ldw	x, (0x05, sp)
      000037 F6               [ 1]   94 	ld	a, (x)
      000038 1E 05            [ 2]   95 	ldw	x, (0x05, sp)
      00003A 5A               [ 2]   96 	decw	x
      00003B 1F 05            [ 2]   97 	ldw	(0x05, sp), x
      00003D 1E 07            [ 2]   98 	ldw	x, (0x07, sp)
      00003F F7               [ 1]   99 	ld	(x), a
      000040 1E 07            [ 2]  100 	ldw	x, (0x07, sp)
      000042 5A               [ 2]  101 	decw	x
      000043 1F 07            [ 2]  102 	ldw	(0x07, sp), x
      000045 20 E8            [ 2]  103 	jra	00101$
      000047                        104 00108$:
                                    105 ;	../_memmove.c: 54: d = dst;
      000047 1E 05            [ 2]  106 	ldw	x, (0x05, sp)
                                    107 ;	../_memmove.c: 55: s = src;
      000049 16 07            [ 2]  108 	ldw	y, (0x07, sp)
                                    109 ;	../_memmove.c: 56: while (acount--) {
      00004B 17 05            [ 2]  110 	ldw	(0x05, sp), y
      00004D 1F 07            [ 2]  111 	ldw	(0x07, sp), x
      00004F                        112 00104$:
      00004F 1E 09            [ 2]  113 	ldw	x, (0x09, sp)
      000051 16 09            [ 2]  114 	ldw	y, (0x09, sp)
      000053 90 5A            [ 2]  115 	decw	y
      000055 17 09            [ 2]  116 	ldw	(0x09, sp), y
      000057 5D               [ 2]  117 	tnzw	x
      000058 27 12            [ 1]  118 	jreq	00109$
                                    119 ;	../_memmove.c: 57: *d++ = *s++;
      00005A 1E 05            [ 2]  120 	ldw	x, (0x05, sp)
      00005C F6               [ 1]  121 	ld	a, (x)
      00005D 1E 05            [ 2]  122 	ldw	x, (0x05, sp)
      00005F 5C               [ 1]  123 	incw	x
      000060 1F 05            [ 2]  124 	ldw	(0x05, sp), x
      000062 1E 07            [ 2]  125 	ldw	x, (0x07, sp)
      000064 F7               [ 1]  126 	ld	(x), a
      000065 1E 07            [ 2]  127 	ldw	x, (0x07, sp)
      000067 5C               [ 1]  128 	incw	x
      000068 1F 07            [ 2]  129 	ldw	(0x07, sp), x
      00006A 20 E3            [ 2]  130 	jra	00104$
      00006C                        131 00109$:
                                    132 ;	../_memmove.c: 61: return(ret);
      00006C 1E 03            [ 2]  133 	ldw	x, (0x03, sp)
                                    134 ;	../_memmove.c: 62: }
      00006E 5B 0A            [ 2]  135 	addw	sp, #10
      000070 87               [ 5]  136 	retf
                                    137 	.area CODE
                                    138 	.area CONST
                                    139 	.area INITIALIZER
                                    140 	.area CABS (ABS)
