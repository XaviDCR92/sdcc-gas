                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module acosf
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _asincosf
                                     12 	.globl _acosf
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	../acosf.c: 36: float acosf(float x) _FLOAT_FUNC_REENTRANT
                                     51 ;	-----------------------------------------
                                     52 ;	 function acosf
                                     53 ;	-----------------------------------------
      000000                         54 _acosf:
                                     55 ;	../acosf.c: 38: if (x == 1.0) return 0.0;
      000000 5F               [ 1]   56 	clrw	x
      000001 89               [ 2]   57 	pushw	x
      000002 4B 80            [ 1]   58 	push	#0x80
      000004 4B 3F            [ 1]   59 	push	#0x3f
      000006 1E 0A            [ 2]   60 	ldw	x, (0x0a, sp)
      000008 89               [ 2]   61 	pushw	x
      000009 1E 0A            [ 2]   62 	ldw	x, (0x0a, sp)
      00000B 89               [ 2]   63 	pushw	x
      00000C 8Ds00r00r00      [ 5]   64 	callf	___fseq
      000010 5B 08            [ 2]   65 	addw	sp, #8
      000012 4D               [ 1]   66 	tnz	a
      000013 27 05            [ 1]   67 	jreq	00108$
      000015 5F               [ 1]   68 	clrw	x
      000016 90 5F            [ 1]   69 	clrw	y
      000018 20 3E            [ 2]   70 	jra	00110$
      00001A                         71 00108$:
                                     72 ;	../acosf.c: 39: else if (x ==-1.0) return PI;
      00001A 5F               [ 1]   73 	clrw	x
      00001B 89               [ 2]   74 	pushw	x
      00001C 4B 80            [ 1]   75 	push	#0x80
      00001E 4B BF            [ 1]   76 	push	#0xbf
      000020 1E 0A            [ 2]   77 	ldw	x, (0x0a, sp)
      000022 89               [ 2]   78 	pushw	x
      000023 1E 0A            [ 2]   79 	ldw	x, (0x0a, sp)
      000025 89               [ 2]   80 	pushw	x
      000026 8Ds00r00r00      [ 5]   81 	callf	___fseq
      00002A 5B 08            [ 2]   82 	addw	sp, #8
      00002C 4D               [ 1]   83 	tnz	a
      00002D 27 09            [ 1]   84 	jreq	00105$
      00002F AE 0F DB         [ 2]   85 	ldw	x, #0x0fdb
      000032 90 AE 40 49      [ 2]   86 	ldw	y, #0x4049
      000036 20 20            [ 2]   87 	jra	00110$
      000038                         88 00105$:
                                     89 ;	../acosf.c: 40: else if (x == 0.0) return HALF_PI;
      000038 1E 06            [ 2]   90 	ldw	x, (0x06, sp)
      00003A 26 0E            [ 1]   91 	jrne	00102$
      00003C 1E 04            [ 2]   92 	ldw	x, (0x04, sp)
      00003E 58               [ 2]   93 	sllw	x
      00003F 26 09            [ 1]   94 	jrne	00102$
      000041 AE 0F DB         [ 2]   95 	ldw	x, #0x0fdb
      000044 90 AE 3F C9      [ 2]   96 	ldw	y, #0x3fc9
      000048 20 0E            [ 2]   97 	jra	00110$
      00004A                         98 00102$:
                                     99 ;	../acosf.c: 41: else               return asincosf(x, true);
      00004A 4B 01            [ 1]  100 	push	#0x01
      00004C 1E 07            [ 2]  101 	ldw	x, (0x07, sp)
      00004E 89               [ 2]  102 	pushw	x
      00004F 1E 07            [ 2]  103 	ldw	x, (0x07, sp)
      000051 89               [ 2]  104 	pushw	x
      000052 8Ds00r00r00      [ 5]  105 	callf	_asincosf
      000056 5B 05            [ 2]  106 	addw	sp, #5
      000058                        107 00110$:
                                    108 ;	../acosf.c: 42: }
      000058 87               [ 5]  109 	retf
                                    110 	.area CODE
                                    111 	.area CONST
                                    112 	.area INITIALIZER
                                    113 	.area CABS (ABS)
