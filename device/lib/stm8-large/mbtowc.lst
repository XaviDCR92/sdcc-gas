                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbtowc
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../mbtowc.c: 31: int mbtowc(wchar_t *pwc, const char *restrict s, size_t n)
                                     50 ;	-----------------------------------------
                                     51 ;	 function mbtowc
                                     52 ;	-----------------------------------------
      000000                         53 _mbtowc:
      000000 52 0C            [ 2]   54 	sub	sp, #12
                                     55 ;	../mbtowc.c: 37: if(!s)
                                     56 ;	../mbtowc.c: 38: return(0);
      000002 1E 12            [ 2]   57 	ldw	x, (0x12, sp)
      000004 26 04            [ 1]   58 	jrne	00102$
      000006 ACs00r01r40      [ 2]   59 	jpf	00126$
      00000A                         60 00102$:
                                     61 ;	../mbtowc.c: 40: seqlen = 1;
      00000A A6 01            [ 1]   62 	ld	a, #0x01
      00000C 6B 0B            [ 1]   63 	ld	(0x0b, sp), a
                                     64 ;	../mbtowc.c: 41: first_byte = *s;
      00000E 16 12            [ 2]   65 	ldw	y, (0x12, sp)
      000010 17 05            [ 2]   66 	ldw	(0x05, sp), y
      000012 93               [ 1]   67 	ldw	x, y
      000013 F6               [ 1]   68 	ld	a, (x)
                                     69 ;	../mbtowc.c: 43: if(first_byte & 0x80)
      000014 6B 0C            [ 1]   70 	ld	(0x0c, sp), a
      000016 2A 41            [ 1]   71 	jrpl	00107$
                                     72 ;	../mbtowc.c: 45: while (first_byte & (0x80 >> seqlen))
      000018 A6 01            [ 1]   73 	ld	a, #0x01
      00001A 6B 07            [ 1]   74 	ld	(0x07, sp), a
      00001C                         75 00103$:
      00001C AE 00 80         [ 2]   76 	ldw	x, #0x0080
      00001F 7B 07            [ 1]   77 	ld	a, (0x07, sp)
      000021 27 04            [ 1]   78 	jreq	00204$
      000023                         79 00203$:
      000023 57               [ 2]   80 	sraw	x
      000024 4A               [ 1]   81 	dec	a
      000025 26 FC            [ 1]   82 	jrne	00203$
      000027                         83 00204$:
      000027 7B 0C            [ 1]   84 	ld	a, (0x0c, sp)
      000029 6B 09            [ 1]   85 	ld	(0x09, sp), a
      00002B 0F 08            [ 1]   86 	clr	(0x08, sp)
                                     87 ;	../mbtowc.c: 46: seqlen++;
      00002D 7B 07            [ 1]   88 	ld	a, (0x07, sp)
      00002F 4C               [ 1]   89 	inc	a
                                     90 ;	../mbtowc.c: 45: while (first_byte & (0x80 >> seqlen))
      000030 88               [ 1]   91 	push	a
      000031 9F               [ 1]   92 	ld	a, xl
      000032 14 0A            [ 1]   93 	and	a, (0x0a, sp)
      000034 6B 0C            [ 1]   94 	ld	(0x0c, sp), a
      000036 9E               [ 1]   95 	ld	a, xh
      000037 14 09            [ 1]   96 	and	a, (0x09, sp)
      000039 6B 0B            [ 1]   97 	ld	(0x0b, sp), a
      00003B 84               [ 1]   98 	pop	a
      00003C 1E 0A            [ 2]   99 	ldw	x, (0x0a, sp)
      00003E 27 04            [ 1]  100 	jreq	00143$
                                    101 ;	../mbtowc.c: 46: seqlen++;
      000040 6B 07            [ 1]  102 	ld	(0x07, sp), a
      000042 20 D8            [ 2]  103 	jra	00103$
      000044                        104 00143$:
      000044 88               [ 1]  105 	push	a
      000045 7B 08            [ 1]  106 	ld	a, (0x08, sp)
      000047 6B 0C            [ 1]  107 	ld	(0x0c, sp), a
      000049 84               [ 1]  108 	pop	a
                                    109 ;	../mbtowc.c: 47: first_byte &= (0xff >> (seqlen + 1));
      00004A AE 00 FF         [ 2]  110 	ldw	x, #0x00ff
      00004D 4D               [ 1]  111 	tnz	a
      00004E 27 04            [ 1]  112 	jreq	00207$
      000050                        113 00206$:
      000050 57               [ 2]  114 	sraw	x
      000051 4A               [ 1]  115 	dec	a
      000052 26 FC            [ 1]  116 	jrne	00206$
      000054                        117 00207$:
      000054 9F               [ 1]  118 	ld	a, xl
      000055 14 0C            [ 1]  119 	and	a, (0x0c, sp)
      000057 6B 0C            [ 1]  120 	ld	(0x0c, sp), a
      000059                        121 00107$:
                                    122 ;	../mbtowc.c: 50: if(seqlen > 4 || n < seqlen)
      000059 7B 0B            [ 1]  123 	ld	a, (0x0b, sp)
      00005B A1 04            [ 1]  124 	cp	a, #0x04
      00005D 22 0C            [ 1]  125 	jrugt	00108$
      00005F 7B 0B            [ 1]  126 	ld	a, (0x0b, sp)
      000061 6B 0A            [ 1]  127 	ld	(0x0a, sp), a
      000063 0F 09            [ 1]  128 	clr	(0x09, sp)
      000065 1E 14            [ 2]  129 	ldw	x, (0x14, sp)
      000067 13 09            [ 2]  130 	cpw	x, (0x09, sp)
      000069 24 06            [ 1]  131 	jrnc	00136$
      00006B                        132 00108$:
                                    133 ;	../mbtowc.c: 51: return(-1);
      00006B 5F               [ 1]  134 	clrw	x
      00006C 5A               [ 2]  135 	decw	x
      00006D ACs00r01r40      [ 2]  136 	jpf	00126$
                                    137 ;	../mbtowc.c: 53: for(i = 1; i < seqlen; i++)
      000071                        138 00136$:
      000071 A6 01            [ 1]  139 	ld	a, #0x01
      000073                        140 00121$:
      000073 11 0B            [ 1]  141 	cp	a, (0x0b, sp)
      000075 24 1B            [ 1]  142 	jrnc	00113$
                                    143 ;	../mbtowc.c: 54: if((s[i] & 0xc0) != 0x80)
      000077 5F               [ 1]  144 	clrw	x
      000078 97               [ 1]  145 	ld	xl, a
      000079 72 FB 05         [ 2]  146 	addw	x, (0x05, sp)
      00007C 88               [ 1]  147 	push	a
      00007D F6               [ 1]  148 	ld	a, (x)
      00007E A4 C0            [ 1]  149 	and	a, #0xc0
      000080 97               [ 1]  150 	ld	xl, a
      000081 4F               [ 1]  151 	clr	a
      000082 95               [ 1]  152 	ld	xh, a
      000083 84               [ 1]  153 	pop	a
      000084 A3 00 80         [ 2]  154 	cpw	x, #0x0080
      000087 27 06            [ 1]  155 	jreq	00122$
                                    156 ;	../mbtowc.c: 55: return(-1);
      000089 5F               [ 1]  157 	clrw	x
      00008A 5A               [ 2]  158 	decw	x
      00008B ACs00r01r40      [ 2]  159 	jpf	00126$
      00008F                        160 00122$:
                                    161 ;	../mbtowc.c: 53: for(i = 1; i < seqlen; i++)
      00008F 4C               [ 1]  162 	inc	a
      000090 20 E1            [ 2]  163 	jra	00121$
      000092                        164 00113$:
                                    165 ;	../mbtowc.c: 57: codepoint = first_byte;
      000092 7B 0C            [ 1]  166 	ld	a, (0x0c, sp)
      000094 6B 0A            [ 1]  167 	ld	(0x0a, sp), a
      000096 0F 09            [ 1]  168 	clr	(0x09, sp)
      000098 5F               [ 1]  169 	clrw	x
                                    170 ;	../mbtowc.c: 59: for(s++, i = seqlen - 1; i; i--)
      000099 16 05            [ 2]  171 	ldw	y, (0x05, sp)
      00009B 90 5C            [ 1]  172 	incw	y
      00009D 17 12            [ 2]  173 	ldw	(0x12, sp), y
      00009F 7B 0B            [ 1]  174 	ld	a, (0x0b, sp)
      0000A1 4A               [ 1]  175 	dec	a
      0000A2 16 12            [ 2]  176 	ldw	y, (0x12, sp)
      0000A4 17 05            [ 2]  177 	ldw	(0x05, sp), y
      0000A6                        178 00124$:
      0000A6 4D               [ 1]  179 	tnz	a
      0000A7 27 4A            [ 1]  180 	jreq	00114$
                                    181 ;	../mbtowc.c: 61: codepoint <<= 6;
      0000A9 88               [ 1]  182 	push	a
      0000AA 16 0A            [ 2]  183 	ldw	y, (0x0a, sp)
      0000AC A6 06            [ 1]  184 	ld	a, #0x06
      0000AE                        185 00215$:
      0000AE 90 58            [ 2]  186 	sllw	y
      0000B0 59               [ 2]  187 	rlcw	x
      0000B1 4A               [ 1]  188 	dec	a
      0000B2 26 FA            [ 1]  189 	jrne	00215$
      0000B4 84               [ 1]  190 	pop	a
      0000B5 17 03            [ 2]  191 	ldw	(0x03, sp), y
      0000B7 1F 01            [ 2]  192 	ldw	(0x01, sp), x
                                    193 ;	../mbtowc.c: 62: codepoint |= (*s & 0x3f);
      0000B9 1E 05            [ 2]  194 	ldw	x, (0x05, sp)
      0000BB 88               [ 1]  195 	push	a
      0000BC F6               [ 1]  196 	ld	a, (x)
      0000BD 97               [ 1]  197 	ld	xl, a
      0000BE 84               [ 1]  198 	pop	a
      0000BF 41               [ 1]  199 	exg	a, xl
      0000C0 6B 0A            [ 1]  200 	ld	(0x0a, sp), a
      0000C2 41               [ 1]  201 	exg	a, xl
      0000C3 0F 09            [ 1]  202 	clr	(0x09, sp)
      0000C5 88               [ 1]  203 	push	a
      0000C6 7B 0B            [ 1]  204 	ld	a, (0x0b, sp)
      0000C8 A4 3F            [ 1]  205 	and	a, #0x3f
      0000CA 97               [ 1]  206 	ld	xl, a
      0000CB 4F               [ 1]  207 	clr	a
      0000CC 95               [ 1]  208 	ld	xh, a
      0000CD 84               [ 1]  209 	pop	a
      0000CE 51               [ 1]  210 	exgw	x, y
      0000CF 5F               [ 1]  211 	clrw	x
      0000D0 90 5D            [ 2]  212 	tnzw	y
      0000D2 2A 01            [ 1]  213 	jrpl	00217$
      0000D4 5A               [ 2]  214 	decw	x
      0000D5                        215 00217$:
      0000D5 88               [ 1]  216 	push	a
      0000D6 90 9F            [ 1]  217 	ld	a, yl
      0000D8 1A 05            [ 1]  218 	or	a, (0x05, sp)
      0000DA 90 02            [ 1]  219 	rlwa	y
      0000DC 1A 04            [ 1]  220 	or	a, (0x04, sp)
      0000DE 90 95            [ 1]  221 	ld	yh, a
      0000E0 9F               [ 1]  222 	ld	a, xl
      0000E1 1A 03            [ 1]  223 	or	a, (0x03, sp)
      0000E3 02               [ 1]  224 	rlwa	x
      0000E4 1A 02            [ 1]  225 	or	a, (0x02, sp)
      0000E6 95               [ 1]  226 	ld	xh, a
      0000E7 84               [ 1]  227 	pop	a
      0000E8 17 09            [ 2]  228 	ldw	(0x09, sp), y
                                    229 ;	../mbtowc.c: 63: s++;
      0000EA 16 05            [ 2]  230 	ldw	y, (0x05, sp)
      0000EC 90 5C            [ 1]  231 	incw	y
      0000EE 17 05            [ 2]  232 	ldw	(0x05, sp), y
                                    233 ;	../mbtowc.c: 59: for(s++, i = seqlen - 1; i; i--)
      0000F0 4A               [ 1]  234 	dec	a
      0000F1 20 B3            [ 2]  235 	jra	00124$
      0000F3                        236 00114$:
                                    237 ;	../mbtowc.c: 66: if(codepoint >= 0xd800 && codepoint <= 0xdfff) // UTF-16 surrogate.
      0000F3 7B 0A            [ 1]  238 	ld	a, (0x0a, sp)
      0000F5 A1 00            [ 1]  239 	cp	a, #0x00
      0000F7 7B 09            [ 1]  240 	ld	a, (0x09, sp)
      0000F9 A2 D8            [ 1]  241 	sbc	a, #0xd8
      0000FB 9F               [ 1]  242 	ld	a, xl
      0000FC A2 00            [ 1]  243 	sbc	a, #0x00
      0000FE 9E               [ 1]  244 	ld	a, xh
      0000FF A2 00            [ 1]  245 	sbc	a, #0x00
      000101 25 18            [ 1]  246 	jrc	00116$
      000103 A6 FF            [ 1]  247 	ld	a, #0xff
      000105 11 0A            [ 1]  248 	cp	a, (0x0a, sp)
      000107 A6 DF            [ 1]  249 	ld	a, #0xdf
      000109 12 09            [ 1]  250 	sbc	a, (0x09, sp)
      00010B 4F               [ 1]  251 	clr	a
      00010C 89               [ 2]  252 	pushw	x
      00010D 12 02            [ 1]  253 	sbc	a, (2, sp)
      00010F 85               [ 2]  254 	popw	x
      000110 4F               [ 1]  255 	clr	a
      000111 89               [ 2]  256 	pushw	x
      000112 12 01            [ 1]  257 	sbc	a, (1, sp)
      000114 85               [ 2]  258 	popw	x
      000115 25 04            [ 1]  259 	jrc	00116$
                                    260 ;	../mbtowc.c: 67: return(-1);
      000117 5F               [ 1]  261 	clrw	x
      000118 5A               [ 2]  262 	decw	x
      000119 20 25            [ 2]  263 	jra	00126$
      00011B                        264 00116$:
                                    265 ;	../mbtowc.c: 69: if(pwc)
      00011B 16 10            [ 2]  266 	ldw	y, (0x10, sp)
      00011D 27 0E            [ 1]  267 	jreq	00119$
                                    268 ;	../mbtowc.c: 70: *pwc = codepoint;
      00011F 16 10            [ 2]  269 	ldw	y, (0x10, sp)
      000121 7B 0A            [ 1]  270 	ld	a, (0x0a, sp)
      000123 90 E7 03         [ 1]  271 	ld	(0x3, y), a
      000126 7B 09            [ 1]  272 	ld	a, (0x09, sp)
      000128 90 E7 02         [ 1]  273 	ld	(0x2, y), a
      00012B 90 FF            [ 2]  274 	ldw	(y), x
      00012D                        275 00119$:
                                    276 ;	../mbtowc.c: 71: return(codepoint ? seqlen : 0);
      00012D 16 09            [ 2]  277 	ldw	y, (0x09, sp)
      00012F 26 03            [ 1]  278 	jrne	00221$
      000131 5D               [ 2]  279 	tnzw	x
      000132 27 07            [ 1]  280 	jreq	00128$
      000134                        281 00221$:
      000134 5F               [ 1]  282 	clrw	x
      000135 7B 0B            [ 1]  283 	ld	a, (0x0b, sp)
      000137 97               [ 1]  284 	ld	xl, a
      000138 1F 0B            [ 2]  285 	ldw	(0x0b, sp), x
      00013A BC                     286 	.byte 0xbc
      00013B                        287 00128$:
      00013B 5F               [ 1]  288 	clrw	x
      00013C 1F 0B            [ 2]  289 	ldw	(0x0b, sp), x
      00013E                        290 00129$:
      00013E 1E 0B            [ 2]  291 	ldw	x, (0x0b, sp)
      000140                        292 00126$:
                                    293 ;	../mbtowc.c: 72: }
      000140 5B 0C            [ 2]  294 	addw	sp, #12
      000142 87               [ 5]  295 	retf
                                    296 	.area CODE
                                    297 	.area CONST
                                    298 	.area INITIALIZER
                                    299 	.area CABS (ABS)
