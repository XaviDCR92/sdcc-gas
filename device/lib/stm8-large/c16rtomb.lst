                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module c16rtomb
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _wctomb
                                     12 	.globl _c16rtomb
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
      000000                         17 _c16rtomb_sps_65536_36:
      000000                         18 	.ds 3
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; absolute external ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DABS (ABS)
                                     27 
                                     28 ; default segment ordering for linker
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area CONST
                                     33 	.area INITIALIZER
                                     34 	.area CODE
                                     35 
                                     36 ;--------------------------------------------------------
                                     37 ; global & static initialisations
                                     38 ;--------------------------------------------------------
                                     39 	.area HOME
                                     40 	.area GSINIT
                                     41 	.area GSFINAL
                                     42 	.area GSINIT
                                     43 ;--------------------------------------------------------
                                     44 ; Home
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
                                     47 	.area HOME
                                     48 ;--------------------------------------------------------
                                     49 ; code
                                     50 ;--------------------------------------------------------
                                     51 	.area CODE
                                     52 ;	../c16rtomb.c: 35: size_t c16rtomb(char *restrict s, char16_t c16, mbstate_t *restrict ps)
                                     53 ;	-----------------------------------------
                                     54 ;	 function c16rtomb
                                     55 ;	-----------------------------------------
      000000                         56 _c16rtomb:
      000000 52 0C            [ 2]   57 	sub	sp, #12
                                     58 ;	../c16rtomb.c: 41: if(!s)
      000002 1E 10            [ 2]   59 	ldw	x, (0x10, sp)
      000004 26 04            [ 1]   60 	jrne	00102$
                                     61 ;	../c16rtomb.c: 42: s = buf;
      000006 96               [ 1]   62 	ldw	x, sp
      000007 5C               [ 1]   63 	incw	x
      000008 1F 10            [ 2]   64 	ldw	(0x10, sp), x
      00000A                         65 00102$:
                                     66 ;	../c16rtomb.c: 44: if(!ps)
      00000A 1E 14            [ 2]   67 	ldw	x, (0x14, sp)
      00000C 26 05            [ 1]   68 	jrne	00104$
                                     69 ;	../c16rtomb.c: 45: ps = &sps;
      00000E AEr00r00         [ 2]   70 	ldw	x, #(_c16rtomb_sps_65536_36 + 0)
      000011 1F 14            [ 2]   71 	ldw	(0x14, sp), x
      000013                         72 00104$:
                                     73 ;	../c16rtomb.c: 49: ps->c[1] = ps->c[2] = 0;
      000013 16 14            [ 2]   74 	ldw	y, (0x14, sp)
      000015 93               [ 1]   75 	ldw	x, y
      000016 5C               [ 1]   76 	incw	x
      000017 1F 05            [ 2]   77 	ldw	(0x05, sp), x
      000019 93               [ 1]   78 	ldw	x, y
      00001A 5C               [ 1]   79 	incw	x
      00001B 5C               [ 1]   80 	incw	x
      00001C 1F 07            [ 2]   81 	ldw	(0x07, sp), x
                                     82 ;	../c16rtomb.c: 47: if (!c16) // 0 always resets conversion state.
      00001E 1E 12            [ 2]   83 	ldw	x, (0x12, sp)
      000020 26 0F            [ 1]   84 	jrne	00119$
                                     85 ;	../c16rtomb.c: 49: ps->c[1] = ps->c[2] = 0;
      000022 1E 07            [ 2]   86 	ldw	x, (0x07, sp)
      000024 7F               [ 1]   87 	clr	(x)
      000025 1E 05            [ 2]   88 	ldw	x, (0x05, sp)
      000027 7F               [ 1]   89 	clr	(x)
                                     90 ;	../c16rtomb.c: 50: codepoint = 0;
      000028 5F               [ 1]   91 	clrw	x
      000029 1F 0B            [ 2]   92 	ldw	(0x0b, sp), x
      00002B 1F 09            [ 2]   93 	ldw	(0x09, sp), x
      00002D ACs00r00rB8      [ 2]   94 	jpf	00120$
      000031                         95 00119$:
                                     96 ;	../c16rtomb.c: 52: else if(ps->c[1] || ps->c[2]) // We already have the high surrogate. Now get the low surrogate
      000031 1E 05            [ 2]   97 	ldw	x, (0x05, sp)
      000033 F6               [ 1]   98 	ld	a, (x)
      000034 90 97            [ 1]   99 	ld	yl, a
      000036 4D               [ 1]  100 	tnz	a
      000037 26 05            [ 1]  101 	jrne	00114$
      000039 1E 07            [ 2]  102 	ldw	x, (0x07, sp)
      00003B F6               [ 1]  103 	ld	a, (x)
      00003C 27 4B            [ 1]  104 	jreq	00115$
      00003E                        105 00114$:
                                    106 ;	../c16rtomb.c: 56: if(c16 < 0xdc00 || c16 > 0xdfff)
      00003E 1E 12            [ 2]  107 	ldw	x, (0x12, sp)
      000040 A3 DC 00         [ 2]  108 	cpw	x, #0xdc00
      000043 24 04            [ 1]  109 	jrnc	00169$
      000045 ACs00r00rC9      [ 2]  110 	jpf	00121$
      000049                        111 00169$:
      000049 1E 12            [ 2]  112 	ldw	x, (0x12, sp)
      00004B A3 DF FF         [ 2]  113 	cpw	x, #0xdfff
      00004E 22 79            [ 1]  114 	jrugt	00121$
                                    115 ;	../c16rtomb.c: 59: high_surrogate = ps->c[1] + (ps->c[2] << 8);
      000050 61               [ 1]  116 	exg	a, yl
      000051 6B 0A            [ 1]  117 	ld	(0x0a, sp), a
      000053 61               [ 1]  118 	exg	a, yl
      000054 0F 09            [ 1]  119 	clr	(0x09, sp)
      000056 16 07            [ 2]  120 	ldw	y, (0x07, sp)
      000058 90 F6            [ 1]  121 	ld	a, (y)
      00005A 95               [ 1]  122 	ld	xh, a
      00005B 0F 0C            [ 1]  123 	clr	(0x0c, sp)
      00005D 7B 0C            [ 1]  124 	ld	a, (0x0c, sp)
      00005F 97               [ 1]  125 	ld	xl, a
      000060 72 FB 09         [ 2]  126 	addw	x, (0x09, sp)
                                    127 ;	../c16rtomb.c: 60: ps->c[1] = ps->c[2] = 0;
      000063 16 07            [ 2]  128 	ldw	y, (0x07, sp)
      000065 90 7F            [ 1]  129 	clr	(y)
      000067 16 05            [ 2]  130 	ldw	y, (0x05, sp)
      000069 90 7F            [ 1]  131 	clr	(y)
                                    132 ;	../c16rtomb.c: 61: codepoint = (high_surrogate << 10) - (0xd800 << 10) + c16 - 0xdc00 + 0x10000;
      00006B 4F               [ 1]  133 	clr	a
      00006C 02               [ 1]  134 	rlwa	x
      00006D 58               [ 2]  135 	sllw	x
      00006E 58               [ 2]  136 	sllw	x
      00006F 72 FB 12         [ 2]  137 	addw	x, (0x12, sp)
      000072 1F 0B            [ 2]  138 	ldw	(0x0b, sp), x
      000074 0F 0A            [ 1]  139 	clr	(0x0a, sp)
      000076 0F 09            [ 1]  140 	clr	(0x09, sp)
      000078 1E 0B            [ 2]  141 	ldw	x, (0x0b, sp)
      00007A 1C 24 00         [ 2]  142 	addw	x, #0x2400
      00007D 16 09            [ 2]  143 	ldw	y, (0x09, sp)
      00007F 24 02            [ 1]  144 	jrnc	00171$
      000081 90 5C            [ 1]  145 	incw	y
      000083                        146 00171$:
      000083 1F 0B            [ 2]  147 	ldw	(0x0b, sp), x
      000085 17 09            [ 2]  148 	ldw	(0x09, sp), y
      000087 20 2F            [ 2]  149 	jra	00120$
      000089                        150 00115$:
                                    151 ;	../c16rtomb.c: 63: else if(c16 < 0xd7ff || c16 >= 0xe000) // Basic multilingual plane.
      000089 1E 12            [ 2]  152 	ldw	x, (0x12, sp)
      00008B A3 D7 FF         [ 2]  153 	cpw	x, #0xd7ff
      00008E 25 05            [ 1]  154 	jrc	00110$
      000090 A3 E0 00         [ 2]  155 	cpw	x, #0xe000
      000093 25 09            [ 1]  156 	jrc	00111$
      000095                        157 00110$:
                                    158 ;	../c16rtomb.c: 64: codepoint = c16;
      000095 16 12            [ 2]  159 	ldw	y, (0x12, sp)
      000097 5F               [ 1]  160 	clrw	x
      000098 17 0B            [ 2]  161 	ldw	(0x0b, sp), y
      00009A 1F 09            [ 2]  162 	ldw	(0x09, sp), x
      00009C 20 1A            [ 2]  163 	jra	00120$
      00009E                        164 00111$:
                                    165 ;	../c16rtomb.c: 67: if(c16 > 0xdbff)
      00009E 1E 12            [ 2]  166 	ldw	x, (0x12, sp)
      0000A0 A3 DB FF         [ 2]  167 	cpw	x, #0xdbff
      0000A3 22 24            [ 1]  168 	jrugt	00121$
                                    169 ;	../c16rtomb.c: 70: ps->c[1] = c16 & 0xff;
      0000A5 7B 13            [ 1]  170 	ld	a, (0x13, sp)
      0000A7 1E 05            [ 2]  171 	ldw	x, (0x05, sp)
      0000A9 F7               [ 1]  172 	ld	(x), a
                                    173 ;	../c16rtomb.c: 71: ps->c[2] = c16 >> 8;
      0000AA 7B 12            [ 1]  174 	ld	a, (0x12, sp)
      0000AC 6B 0C            [ 1]  175 	ld	(0x0c, sp), a
      0000AE 0F 0B            [ 1]  176 	clr	(0x0b, sp)
      0000B0 7B 0C            [ 1]  177 	ld	a, (0x0c, sp)
      0000B2 1E 07            [ 2]  178 	ldw	x, (0x07, sp)
      0000B4 F7               [ 1]  179 	ld	(x), a
                                    180 ;	../c16rtomb.c: 72: return(0);
      0000B5 5F               [ 1]  181 	clrw	x
      0000B6 20 19            [ 2]  182 	jra	00122$
      0000B8                        183 00120$:
                                    184 ;	../c16rtomb.c: 75: return(wctomb(s, codepoint));
      0000B8 1E 0B            [ 2]  185 	ldw	x, (0x0b, sp)
      0000BA 89               [ 2]  186 	pushw	x
      0000BB 1E 0B            [ 2]  187 	ldw	x, (0x0b, sp)
      0000BD 89               [ 2]  188 	pushw	x
      0000BE 1E 14            [ 2]  189 	ldw	x, (0x14, sp)
      0000C0 89               [ 2]  190 	pushw	x
      0000C1 8Ds00r00r00      [ 5]  191 	callf	_wctomb
      0000C5 5B 06            [ 2]  192 	addw	sp, #6
      0000C7 20 08            [ 2]  193 	jra	00122$
                                    194 ;	../c16rtomb.c: 77: eilseq:
      0000C9                        195 00121$:
                                    196 ;	../c16rtomb.c: 78: errno = EILSEQ;
      0000C9 AE 00 54         [ 2]  197 	ldw	x, #0x0054
      0000CC CFu00u00         [ 2]  198 	ldw	_errno+0, x
                                    199 ;	../c16rtomb.c: 79: return(-1);
      0000CF 5F               [ 1]  200 	clrw	x
      0000D0 5A               [ 2]  201 	decw	x
      0000D1                        202 00122$:
                                    203 ;	../c16rtomb.c: 80: }
      0000D1 5B 0C            [ 2]  204 	addw	sp, #12
      0000D3 87               [ 5]  205 	retf
                                    206 	.area CODE
                                    207 	.area CONST
                                    208 	.area INITIALIZER
                                    209 	.area CABS (ABS)
