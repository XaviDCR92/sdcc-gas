                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module qsort
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _qsort
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../qsort.c: 33: static void swap(void *restrict dst, void *restrict src, size_t n)
                                     50 ;	-----------------------------------------
                                     51 ;	 function swap
                                     52 ;	-----------------------------------------
      000000                         53 _swap:
      000000 52 06            [ 2]   54 	sub	sp, #6
                                     55 ;	../qsort.c: 35: unsigned char *restrict d = dst;
      000002 1E 0A            [ 2]   56 	ldw	x, (0x0a, sp)
                                     57 ;	../qsort.c: 36: unsigned char *restrict s = src;
      000004 16 0C            [ 2]   58 	ldw	y, (0x0c, sp)
                                     59 ;	../qsort.c: 38: while(n--)
      000006 17 03            [ 2]   60 	ldw	(0x03, sp), y
      000008 16 0E            [ 2]   61 	ldw	y, (0x0e, sp)
      00000A 17 05            [ 2]   62 	ldw	(0x05, sp), y
      00000C                         63 00101$:
      00000C 16 05            [ 2]   64 	ldw	y, (0x05, sp)
      00000E 17 01            [ 2]   65 	ldw	(0x01, sp), y
      000010 16 05            [ 2]   66 	ldw	y, (0x05, sp)
      000012 90 5A            [ 2]   67 	decw	y
      000014 17 05            [ 2]   68 	ldw	(0x05, sp), y
      000016 16 01            [ 2]   69 	ldw	y, (0x01, sp)
      000018 27 17            [ 1]   70 	jreq	00104$
                                     71 ;	../qsort.c: 40: unsigned char tmp = *d;
      00001A F6               [ 1]   72 	ld	a, (x)
      00001B 6B 02            [ 1]   73 	ld	(0x02, sp), a
                                     74 ;	../qsort.c: 41: *d = *s;
      00001D 16 03            [ 2]   75 	ldw	y, (0x03, sp)
      00001F 90 F6            [ 1]   76 	ld	a, (y)
      000021 F7               [ 1]   77 	ld	(x), a
                                     78 ;	../qsort.c: 42: *s = tmp;
      000022 16 03            [ 2]   79 	ldw	y, (0x03, sp)
      000024 7B 02            [ 1]   80 	ld	a, (0x02, sp)
      000026 90 F7            [ 1]   81 	ld	(y), a
                                     82 ;	../qsort.c: 43: d++;
      000028 5C               [ 1]   83 	incw	x
                                     84 ;	../qsort.c: 44: s++;
      000029 16 03            [ 2]   85 	ldw	y, (0x03, sp)
      00002B 90 5C            [ 1]   86 	incw	y
      00002D 17 03            [ 2]   87 	ldw	(0x03, sp), y
      00002F 20 DB            [ 2]   88 	jra	00101$
      000031                         89 00104$:
                                     90 ;	../qsort.c: 46: }
      000031 5B 06            [ 2]   91 	addw	sp, #6
      000033 87               [ 5]   92 	retf
                                     93 ;	../qsort.c: 48: void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *) __reentrant)
                                     94 ;	-----------------------------------------
                                     95 ;	 function qsort
                                     96 ;	-----------------------------------------
      000034                         97 _qsort:
      000034 52 0C            [ 2]   98 	sub	sp, #12
                                     99 ;	../qsort.c: 50: unsigned char *b = base;
      000036 16 10            [ 2]  100 	ldw	y, (0x10, sp)
      000038 17 0B            [ 2]  101 	ldw	(0x0b, sp), y
      00003A 17 01            [ 2]  102 	ldw	(0x01, sp), y
                                    103 ;	../qsort.c: 52: if(nmemb <= 1)
      00003C 1E 12            [ 2]  104 	ldw	x, (0x12, sp)
      00003E A3 00 01         [ 2]  105 	cpw	x, #0x0001
                                    106 ;	../qsort.c: 53: return;
      000041 23 61            [ 2]  107 	jrule	00112$
                                    108 ;	../qsort.c: 55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      000043 16 0B            [ 2]  109 	ldw	y, (0x0b, sp)
      000045 17 03            [ 2]  110 	ldw	(0x03, sp), y
      000047 16 14            [ 2]  111 	ldw	y, (0x14, sp)
      000049 17 05            [ 2]  112 	ldw	(0x05, sp), y
      00004B 93               [ 1]  113 	ldw	x, y
      00004C 89               [ 2]  114 	pushw	x
      00004D 1E 14            [ 2]  115 	ldw	x, (0x14, sp)
      00004F 89               [ 2]  116 	pushw	x
      000050 8Ds00r00r00      [ 5]  117 	callf	__mulint
      000054 5B 04            [ 2]  118 	addw	sp, #4
      000056 72 FB 01         [ 2]  119 	addw	x, (0x01, sp)
      000059 1F 07            [ 2]  120 	ldw	(0x07, sp), x
      00005B                        121 00110$:
      00005B 1E 03            [ 2]  122 	ldw	x, (0x03, sp)
      00005D 13 07            [ 2]  123 	cpw	x, (0x07, sp)
      00005F 24 43            [ 1]  124 	jrnc	00112$
                                    125 ;	../qsort.c: 57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      000061 16 03            [ 2]  126 	ldw	y, (0x03, sp)
      000063                        127 00107$:
      000063 51               [ 1]  128 	exgw	x, y
      000064 13 01            [ 2]  129 	cpw	x, (0x01, sp)
      000066 51               [ 1]  130 	exgw	x, y
      000067 23 32            [ 2]  131 	jrule	00111$
      000069 93               [ 1]  132 	ldw	x, y
      00006A 72 F0 05         [ 2]  133 	subw	x, (0x05, sp)
      00006D 1F 09            [ 2]  134 	ldw	(0x09, sp), x
      00006F 17 0B            [ 2]  135 	ldw	(0x0b, sp), y
      000071 89               [ 2]  136 	pushw	x
      000072 1E 0D            [ 2]  137 	ldw	x, (0x0d, sp)
      000074 89               [ 2]  138 	pushw	x
      000075 4Br82            [ 1]  139 	push	#(00147$)
      000077 4Bs00            [ 1]  140 	push	#(00147$ >> 8)
      000079 4Bs00            [ 1]  141 	push	#(00147$ >> 16)
      00007B 1E 1E            [ 2]  142 	ldw	x, (0x1e, sp)
      00007D 89               [ 2]  143 	pushw	x
      00007E 7B 1F            [ 1]  144 	ld	a, (0x1f, sp)
      000080 88               [ 1]  145 	push	a
      000081 87               [ 5]  146 	retf
      000082                        147 00147$:
      000082 5B 04            [ 2]  148 	addw	sp, #4
      000084 5D               [ 2]  149 	tnzw	x
      000085 2A 14            [ 1]  150 	jrpl	00111$
                                    151 ;	../qsort.c: 58: swap(j, j - size, size);
      000087 1E 09            [ 2]  152 	ldw	x, (0x09, sp)
      000089 16 05            [ 2]  153 	ldw	y, (0x05, sp)
      00008B 90 89            [ 2]  154 	pushw	y
      00008D 89               [ 2]  155 	pushw	x
      00008E 1E 0F            [ 2]  156 	ldw	x, (0x0f, sp)
      000090 89               [ 2]  157 	pushw	x
      000091 8Ds00r00r00      [ 5]  158 	callf	_swap
      000095 5B 06            [ 2]  159 	addw	sp, #6
                                    160 ;	../qsort.c: 57: for(unsigned char *j = i; (j > b) && (*compar)(j, j - size) < 0; j -= size)
      000097 16 09            [ 2]  161 	ldw	y, (0x09, sp)
      000099 20 C8            [ 2]  162 	jra	00107$
      00009B                        163 00111$:
                                    164 ;	../qsort.c: 55: for(unsigned char *i = base; i < b + nmemb * size; i += size)
      00009B 1E 03            [ 2]  165 	ldw	x, (0x03, sp)
      00009D 72 FB 05         [ 2]  166 	addw	x, (0x05, sp)
      0000A0 1F 03            [ 2]  167 	ldw	(0x03, sp), x
      0000A2 20 B7            [ 2]  168 	jra	00110$
      0000A4                        169 00112$:
                                    170 ;	../qsort.c: 60: }
      0000A4 5B 0C            [ 2]  171 	addw	sp, #12
      0000A6 87               [ 5]  172 	retf
                                    173 	.area CODE
                                    174 	.area CONST
                                    175 	.area INITIALIZER
                                    176 	.area CABS (ABS)
