                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module _modulong
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __modulong
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../_modulong.c: 340: _modulong (unsigned long a, unsigned long b)
                                     50 ;	-----------------------------------------
                                     51 ;	 function _modulong
                                     52 ;	-----------------------------------------
      000000                         53 __modulong:
      000000 88               [ 1]   54 	push	a
                                     55 ;	../_modulong.c: 342: unsigned char count = 0;
      000001 4F               [ 1]   56 	clr	a
                                     57 ;	../_modulong.c: 344: while (!MSB_SET(b))
      000002 0F 01            [ 1]   58 	clr	(0x01, sp)
      000004                         59 00103$:
      000004 0D 09            [ 1]   60 	tnz	(0x09, sp)
      000006 2B 28            [ 1]   61 	jrmi	00117$
                                     62 ;	../_modulong.c: 346: b <<= 1;
      000008 08 0C            [ 1]   63 	sll	(0x0c, sp)
      00000A 09 0B            [ 1]   64 	rlc	(0x0b, sp)
      00000C 09 0A            [ 1]   65 	rlc	(0x0a, sp)
      00000E 09 09            [ 1]   66 	rlc	(0x09, sp)
                                     67 ;	../_modulong.c: 347: if (b > a)
      000010 1E 07            [ 2]   68 	ldw	x, (0x07, sp)
      000012 13 0B            [ 2]   69 	cpw	x, (0x0b, sp)
      000014 88               [ 1]   70 	push	a
      000015 7B 07            [ 1]   71 	ld	a, (0x07, sp)
      000017 12 0B            [ 1]   72 	sbc	a, (0x0b, sp)
      000019 7B 06            [ 1]   73 	ld	a, (0x06, sp)
      00001B 12 0A            [ 1]   74 	sbc	a, (0x0a, sp)
      00001D 84               [ 1]   75 	pop	a
      00001E 24 0A            [ 1]   76 	jrnc	00102$
                                     77 ;	../_modulong.c: 349: b >>=1;
      000020 04 09            [ 1]   78 	srl	(0x09, sp)
      000022 06 0A            [ 1]   79 	rrc	(0x0a, sp)
      000024 06 0B            [ 1]   80 	rrc	(0x0b, sp)
      000026 06 0C            [ 1]   81 	rrc	(0x0c, sp)
                                     82 ;	../_modulong.c: 350: break;
      000028 20 06            [ 2]   83 	jra	00117$
      00002A                         84 00102$:
                                     85 ;	../_modulong.c: 352: count++;
      00002A 0C 01            [ 1]   86 	inc	(0x01, sp)
      00002C 7B 01            [ 1]   87 	ld	a, (0x01, sp)
      00002E 20 D4            [ 2]   88 	jra	00103$
                                     89 ;	../_modulong.c: 354: do
      000030                         90 00117$:
      000030 6B 01            [ 1]   91 	ld	(0x01, sp), a
      000032                         92 00108$:
                                     93 ;	../_modulong.c: 356: if (a >= b)
      000032 1E 07            [ 2]   94 	ldw	x, (0x07, sp)
      000034 13 0B            [ 2]   95 	cpw	x, (0x0b, sp)
      000036 7B 06            [ 1]   96 	ld	a, (0x06, sp)
      000038 12 0A            [ 1]   97 	sbc	a, (0x0a, sp)
      00003A 7B 05            [ 1]   98 	ld	a, (0x05, sp)
      00003C 12 09            [ 1]   99 	sbc	a, (0x09, sp)
      00003E 25 13            [ 1]  100 	jrc	00107$
                                    101 ;	../_modulong.c: 357: a -= b;
      000040 16 07            [ 2]  102 	ldw	y, (0x07, sp)
      000042 72 F2 0B         [ 2]  103 	subw	y, (0x0b, sp)
      000045 7B 06            [ 1]  104 	ld	a, (0x06, sp)
      000047 12 0A            [ 1]  105 	sbc	a, (0x0a, sp)
      000049 97               [ 1]  106 	ld	xl, a
      00004A 7B 05            [ 1]  107 	ld	a, (0x05, sp)
      00004C 12 09            [ 1]  108 	sbc	a, (0x09, sp)
      00004E 95               [ 1]  109 	ld	xh, a
      00004F 17 07            [ 2]  110 	ldw	(0x07, sp), y
      000051 1F 05            [ 2]  111 	ldw	(0x05, sp), x
      000053                        112 00107$:
                                    113 ;	../_modulong.c: 358: b >>= 1;
      000053 04 09            [ 1]  114 	srl	(0x09, sp)
      000055 06 0A            [ 1]  115 	rrc	(0x0a, sp)
      000057 06 0B            [ 1]  116 	rrc	(0x0b, sp)
      000059 06 0C            [ 1]  117 	rrc	(0x0c, sp)
                                    118 ;	../_modulong.c: 360: while (count--);
      00005B 7B 01            [ 1]  119 	ld	a, (0x01, sp)
      00005D 0A 01            [ 1]  120 	dec	(0x01, sp)
      00005F 4D               [ 1]  121 	tnz	a
      000060 26 D0            [ 1]  122 	jrne	00108$
                                    123 ;	../_modulong.c: 362: return a;
      000062 1E 07            [ 2]  124 	ldw	x, (0x07, sp)
      000064 16 05            [ 2]  125 	ldw	y, (0x05, sp)
                                    126 ;	../_modulong.c: 363: }
      000066 84               [ 1]  127 	pop	a
      000067 87               [ 5]  128 	retf
                                    129 	.area CODE
                                    130 	.area CONST
                                    131 	.area INITIALIZER
                                    132 	.area CABS (ABS)
