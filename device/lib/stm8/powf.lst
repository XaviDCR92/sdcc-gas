                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module powf
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _logf
                                     12 	.globl _expf
                                     13 	.globl _powf
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 
                                     27 ; default segment ordering for linker
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area CONST
                                     32 	.area INITIALIZER
                                     33 	.area CODE
                                     34 
                                     35 ;--------------------------------------------------------
                                     36 ; global & static initialisations
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
                                     39 	.area GSINIT
                                     40 	.area GSFINAL
                                     41 	.area GSINIT
                                     42 ;--------------------------------------------------------
                                     43 ; Home
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
                                     46 	.area HOME
                                     47 ;--------------------------------------------------------
                                     48 ; code
                                     49 ;--------------------------------------------------------
                                     50 	.area CODE
                                     51 ;	../powf.c: 35: float powf(float x, float y)
                                     52 ;	-----------------------------------------
                                     53 ;	 function powf
                                     54 ;	-----------------------------------------
      000000                         55 _powf:
      000000 52 04            [ 2]   56 	sub	sp, #4
                                     57 ;	../powf.c: 37: if(y == 0.0) return 1.0;
      000002 1E 0D            [ 2]   58 	ldw	x, (0x0d, sp)
      000004 26 0C            [ 1]   59 	jrne	00102$
      000006 1E 0B            [ 2]   60 	ldw	x, (0x0b, sp)
      000008 58               [ 2]   61 	sllw	x
      000009 26 07            [ 1]   62 	jrne	00102$
      00000B 5F               [ 1]   63 	clrw	x
      00000C 90 AE 3F 80      [ 2]   64 	ldw	y, #0x3f80
      000010 20 56            [ 2]   65 	jra	00107$
      000012                         66 00102$:
                                     67 ;	../powf.c: 38: if(y == 1.0) return x;
      000012 5F               [ 1]   68 	clrw	x
      000013 89               [ 2]   69 	pushw	x
      000014 4B 80            [ 1]   70 	push	#0x80
      000016 4B 3F            [ 1]   71 	push	#0x3f
      000018 1E 11            [ 2]   72 	ldw	x, (0x11, sp)
      00001A 89               [ 2]   73 	pushw	x
      00001B 1E 11            [ 2]   74 	ldw	x, (0x11, sp)
      00001D 89               [ 2]   75 	pushw	x
      00001E CDr00r00         [ 4]   76 	call	___fseq
      000021 5B 08            [ 2]   77 	addw	sp, #8
      000023 4D               [ 1]   78 	tnz	a
      000024 27 06            [ 1]   79 	jreq	00104$
      000026 1E 09            [ 2]   80 	ldw	x, (0x09, sp)
      000028 16 07            [ 2]   81 	ldw	y, (0x07, sp)
      00002A 20 3C            [ 2]   82 	jra	00107$
      00002C                         83 00104$:
                                     84 ;	../powf.c: 39: if(x <= 0.0) return 0.0;
      00002C 1E 09            [ 2]   85 	ldw	x, (0x09, sp)
      00002E 89               [ 2]   86 	pushw	x
      00002F 1E 09            [ 2]   87 	ldw	x, (0x09, sp)
      000031 89               [ 2]   88 	pushw	x
      000032 5F               [ 1]   89 	clrw	x
      000033 89               [ 2]   90 	pushw	x
      000034 5F               [ 1]   91 	clrw	x
      000035 89               [ 2]   92 	pushw	x
      000036 CDr00r00         [ 4]   93 	call	___fslt
      000039 5B 08            [ 2]   94 	addw	sp, #8
      00003B 4D               [ 1]   95 	tnz	a
      00003C 26 05            [ 1]   96 	jrne	00106$
      00003E 5F               [ 1]   97 	clrw	x
      00003F 90 5F            [ 1]   98 	clrw	y
      000041 20 25            [ 2]   99 	jra	00107$
      000043                        100 00106$:
                                    101 ;	../powf.c: 40: return expf(logf(x) * y);
      000043 1E 09            [ 2]  102 	ldw	x, (0x09, sp)
      000045 89               [ 2]  103 	pushw	x
      000046 1E 09            [ 2]  104 	ldw	x, (0x09, sp)
      000048 89               [ 2]  105 	pushw	x
      000049 CDr00r00         [ 4]  106 	call	_logf
      00004C 5B 04            [ 2]  107 	addw	sp, #4
      00004E 1F 03            [ 2]  108 	ldw	(0x03, sp), x
      000050 1E 0D            [ 2]  109 	ldw	x, (0x0d, sp)
      000052 89               [ 2]  110 	pushw	x
      000053 1E 0D            [ 2]  111 	ldw	x, (0x0d, sp)
      000055 89               [ 2]  112 	pushw	x
      000056 1E 07            [ 2]  113 	ldw	x, (0x07, sp)
      000058 89               [ 2]  114 	pushw	x
      000059 90 89            [ 2]  115 	pushw	y
      00005B CDr00r00         [ 4]  116 	call	___fsmul
      00005E 5B 08            [ 2]  117 	addw	sp, #8
      000060 89               [ 2]  118 	pushw	x
      000061 90 89            [ 2]  119 	pushw	y
      000063 CDr00r00         [ 4]  120 	call	_expf
      000066 5B 04            [ 2]  121 	addw	sp, #4
      000068                        122 00107$:
                                    123 ;	../powf.c: 41: }
      000068 5B 04            [ 2]  124 	addw	sp, #4
      00006A 81               [ 4]  125 	ret
                                    126 	.area CODE
                                    127 	.area CONST
                                    128 	.area INITIALIZER
                                    129 	.area CABS (ABS)
