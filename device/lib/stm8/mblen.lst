                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mblen
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mblen
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 
                                     25 ; default segment ordering for linker
                                     26 	.area HOME
                                     27 	.area GSINIT
                                     28 	.area GSFINAL
                                     29 	.area CONST
                                     30 	.area INITIALIZER
                                     31 	.area CODE
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
                                     44 	.area HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area CODE
                                     49 ;	../mblen.c: 31: int mblen(const char *s, size_t n)
                                     50 ;	-----------------------------------------
                                     51 ;	 function mblen
                                     52 ;	-----------------------------------------
      000000                         53 _mblen:
      000000 52 05            [ 2]   54 	sub	sp, #5
                                     55 ;	../mblen.c: 36: if(!s)
                                     56 ;	../mblen.c: 37: return(0);
      000002 1E 08            [ 2]   57 	ldw	x, (0x08, sp)
      000004 27 54            [ 1]   58 	jreq	00119$
                                     59 ;	../mblen.c: 39: if(!n)
                                     60 ;	../mblen.c: 40: return(-1);
      000006 1E 0A            [ 2]   61 	ldw	x, (0x0a, sp)
      000008 26 03            [ 1]   62 	jrne	00104$
      00000A 5A               [ 2]   63 	decw	x
      00000B 20 4D            [ 2]   64 	jra	00119$
      00000D                         65 00104$:
                                     66 ;	../mblen.c: 42: c = *s;
      00000D 16 08            [ 2]   67 	ldw	y, (0x08, sp)
      00000F 90 F6            [ 1]   68 	ld	a, (y)
                                     69 ;	../mblen.c: 44: if(!c)
      000011 95               [ 1]   70 	ld	xh, a
      000012 4D               [ 1]   71 	tnz	a
      000013 26 03            [ 1]   72 	jrne	00106$
                                     73 ;	../mblen.c: 45: return(0);
      000015 5F               [ 1]   74 	clrw	x
      000016 20 42            [ 2]   75 	jra	00119$
      000018                         76 00106$:
                                     77 ;	../mblen.c: 47: if(c <= 0x7f)
      000018 9E               [ 1]   78 	ld	a, xh
      000019 A1 7F            [ 1]   79 	cp	a, #0x7f
      00001B 22 04            [ 1]   80 	jrugt	00126$
                                     81 ;	../mblen.c: 48: return(1);
      00001D 5F               [ 1]   82 	clrw	x
      00001E 5C               [ 1]   83 	incw	x
      00001F 20 39            [ 2]   84 	jra	00119$
                                     85 ;	../mblen.c: 50: while(c & 0x80)
      000021                         86 00126$:
      000021 4F               [ 1]   87 	clr	a
      000022                         88 00109$:
      000022 5D               [ 2]   89 	tnzw	x
      000023 2A 06            [ 1]   90 	jrpl	00111$
                                     91 ;	../mblen.c: 52: c <<= 1;
      000025 02               [ 1]   92 	rlwa	x
      000026 48               [ 1]   93 	sll	a
      000027 01               [ 1]   94 	rrwa	x
                                     95 ;	../mblen.c: 53: m++;
      000028 4C               [ 1]   96 	inc	a
      000029 20 F7            [ 2]   97 	jra	00109$
      00002B                         98 00111$:
                                     99 ;	../mblen.c: 56: if(m > n)
      00002B 6B 02            [ 1]  100 	ld	(0x02, sp), a
      00002D 0F 01            [ 1]  101 	clr	(0x01, sp)
      00002F 1E 01            [ 2]  102 	ldw	x, (0x01, sp)
      000031 13 0A            [ 2]  103 	cpw	x, (0x0a, sp)
      000033 23 04            [ 2]  104 	jrule	00129$
                                    105 ;	../mblen.c: 57: return(-1);
      000035 5F               [ 1]  106 	clrw	x
      000036 5A               [ 2]  107 	decw	x
      000037 20 21            [ 2]  108 	jra	00119$
                                    109 ;	../mblen.c: 60: while(--m)
      000039                        110 00129$:
      000039 6B 05            [ 1]  111 	ld	(0x05, sp), a
      00003B                        112 00116$:
      00003B 0A 05            [ 1]  113 	dec	(0x05, sp)
      00003D 0D 05            [ 1]  114 	tnz	(0x05, sp)
      00003F 27 17            [ 1]  115 	jreq	00118$
                                    116 ;	../mblen.c: 61: if((*++s & 0xc0) != 0x80)
      000041 90 5C            [ 1]  117 	incw	y
      000043 90 F6            [ 1]  118 	ld	a, (y)
      000045 6B 04            [ 1]  119 	ld	(0x04, sp), a
      000047 0F 03            [ 1]  120 	clr	(0x03, sp)
      000049 7B 04            [ 1]  121 	ld	a, (0x04, sp)
      00004B A4 C0            [ 1]  122 	and	a, #0xc0
      00004D 97               [ 1]  123 	ld	xl, a
      00004E 4F               [ 1]  124 	clr	a
      00004F 95               [ 1]  125 	ld	xh, a
      000050 A3 00 80         [ 2]  126 	cpw	x, #0x0080
      000053 27 E6            [ 1]  127 	jreq	00116$
                                    128 ;	../mblen.c: 62: return(-1);
      000055 5F               [ 1]  129 	clrw	x
      000056 5A               [ 2]  130 	decw	x
                                    131 ;	../mblen.c: 64: return(n);
      000057 C5                     132 	.byte 0xc5
      000058                        133 00118$:
      000058 1E 01            [ 2]  134 	ldw	x, (0x01, sp)
      00005A                        135 00119$:
                                    136 ;	../mblen.c: 65: }
      00005A 5B 05            [ 2]  137 	addw	sp, #5
      00005C 81               [ 4]  138 	ret
                                    139 	.area CODE
                                    140 	.area CONST
                                    141 	.area INITIALIZER
                                    142 	.area CABS (ABS)
