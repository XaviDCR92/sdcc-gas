                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module c16stombs
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___memcpy
                                     12 	.globl _wctomb
                                     13 	.globl ___c16stombs
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 
                                     27 ; default segment ordering for linker
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area CONST
                                     32 	.area INITIALIZER
                                     33 	.area CODE
                                     34 
                                     35 ;--------------------------------------------------------
                                     36 ; global & static initialisations
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
                                     39 	.area GSINIT
                                     40 	.area GSFINAL
                                     41 	.area GSINIT
                                     42 ;--------------------------------------------------------
                                     43 ; Home
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
                                     46 	.area HOME
                                     47 ;--------------------------------------------------------
                                     48 ; code
                                     49 ;--------------------------------------------------------
                                     50 	.area CODE
                                     51 ;	../c16stombs.c: 44: size_t __c16stombs(char *restrict s, const char16_t *restrict c16s, size_t n)
                                     52 ;	-----------------------------------------
                                     53 ;	 function __c16stombs
                                     54 ;	-----------------------------------------
      000000                         55 ___c16stombs:
      000000 52 12            [ 2]   56 	sub	sp, #18
                                     57 ;	../c16stombs.c: 46: size_t m = 0;
      000002 5F               [ 1]   58 	clrw	x
      000003 1F 09            [ 2]   59 	ldw	(0x09, sp), x
                                     60 ;	../c16stombs.c: 87: return(m);
      000005                         61 00119$:
                                     62 ;	../c16stombs.c: 54: if(c16s[0] < 0xd800 || c16s[0] >= 0xe000) // Basic multilingual plane
      000005 16 17            [ 2]   63 	ldw	y, (0x17, sp)
      000007 17 0B            [ 2]   64 	ldw	(0x0b, sp), y
      000009 93               [ 1]   65 	ldw	x, y
      00000A FE               [ 2]   66 	ldw	x, (x)
      00000B 1F 03            [ 2]   67 	ldw	(0x03, sp), x
                                     68 ;	../c16stombs.c: 57: c16s++;
      00000D 1E 0B            [ 2]   69 	ldw	x, (0x0b, sp)
      00000F 5C               [ 1]   70 	incw	x
      000010 5C               [ 1]   71 	incw	x
      000011 1F 0D            [ 2]   72 	ldw	(0x0d, sp), x
                                     73 ;	../c16stombs.c: 56: codepoint = c16s[0];
      000013 16 03            [ 2]   74 	ldw	y, (0x03, sp)
      000015 17 11            [ 2]   75 	ldw	(0x11, sp), y
      000017 0F 10            [ 1]   76 	clr	(0x10, sp)
      000019 0F 0F            [ 1]   77 	clr	(0x0f, sp)
                                     78 ;	../c16stombs.c: 54: if(c16s[0] < 0xd800 || c16s[0] >= 0xe000) // Basic multilingual plane
      00001B 1E 03            [ 2]   79 	ldw	x, (0x03, sp)
      00001D A3 D8 00         [ 2]   80 	cpw	x, #0xd800
      000020 25 05            [ 1]   81 	jrc	00106$
      000022 A3 E0 00         [ 2]   82 	cpw	x, #0xe000
      000025 25 06            [ 1]   83 	jrc	00107$
      000027                         84 00106$:
                                     85 ;	../c16stombs.c: 56: codepoint = c16s[0];
                                     86 ;	../c16stombs.c: 57: c16s++;
      000027 1E 0D            [ 2]   87 	ldw	x, (0x0d, sp)
      000029 1F 17            [ 2]   88 	ldw	(0x17, sp), x
      00002B 20 4C            [ 2]   89 	jra	00108$
      00002D                         90 00107$:
                                     91 ;	../c16stombs.c: 59: else if(c16s[0] > 0xdbff || c16s[1] < 0xdc00 || c16s[1] > 0xdfff) // Unpaired surrogate
      00002D 1E 03            [ 2]   92 	ldw	x, (0x03, sp)
      00002F A3 DB FF         [ 2]   93 	cpw	x, #0xdbff
      000032 22 0D            [ 1]   94 	jrugt	00101$
      000034 1E 0D            [ 2]   95 	ldw	x, (0x0d, sp)
      000036 FE               [ 2]   96 	ldw	x, (x)
      000037 A3 DC 00         [ 2]   97 	cpw	x, #0xdc00
      00003A 25 05            [ 1]   98 	jrc	00101$
      00003C A3 DF FF         [ 2]   99 	cpw	x, #0xdfff
      00003F 23 05            [ 2]  100 	jrule	00102$
      000041                        101 00101$:
                                    102 ;	../c16stombs.c: 60: return(-1);
      000041 5F               [ 1]  103 	clrw	x
      000042 5A               [ 2]  104 	decw	x
      000043 CCr00rD7         [ 2]  105 	jp	00121$
      000046                        106 00102$:
                                    107 ;	../c16stombs.c: 63: codepoint = ((unsigned long)(c16s[0]) << 10) -(0xd800ul << 10) + (unsigned long)(c16s[1]) - 0xdc00ul + 0x10000ul;
      000046 A6 0A            [ 1]  108 	ld	a, #0x0a
      000048                        109 00168$:
      000048 08 12            [ 1]  110 	sll	(0x12, sp)
      00004A 09 11            [ 1]  111 	rlc	(0x11, sp)
      00004C 09 10            [ 1]  112 	rlc	(0x10, sp)
      00004E 09 0F            [ 1]  113 	rlc	(0x0f, sp)
      000050 4A               [ 1]  114 	dec	a
      000051 26 F5            [ 1]  115 	jrne	00168$
      000053 1F 03            [ 2]  116 	ldw	(0x03, sp), x
      000055 5F               [ 1]  117 	clrw	x
      000056 16 03            [ 2]  118 	ldw	y, (0x03, sp)
      000058 72 F9 11         [ 2]  119 	addw	y, (0x11, sp)
      00005B 9F               [ 1]  120 	ld	a, xl
      00005C 19 10            [ 1]  121 	adc	a, (0x10, sp)
      00005E 88               [ 1]  122 	push	a
      00005F 9E               [ 1]  123 	ld	a, xh
      000060 19 10            [ 1]  124 	adc	a, (0x10, sp)
      000062 95               [ 1]  125 	ld	xh, a
      000063 84               [ 1]  126 	pop	a
      000064 72 A9 24 00      [ 2]  127 	addw	y, #0x2400
      000068 A9 A0            [ 1]  128 	adc	a, #0xa0
      00006A 02               [ 1]  129 	rlwa	x
      00006B A9 FC            [ 1]  130 	adc	a, #0xfc
      00006D 95               [ 1]  131 	ld	xh, a
      00006E 17 11            [ 2]  132 	ldw	(0x11, sp), y
      000070 1F 0F            [ 2]  133 	ldw	(0x0f, sp), x
                                    134 ;	../c16stombs.c: 64: c16s += 2;
      000072 1E 0B            [ 2]  135 	ldw	x, (0x0b, sp)
      000074 1C 00 04         [ 2]  136 	addw	x, #0x0004
      000077 1F 17            [ 2]  137 	ldw	(0x17, sp), x
      000079                        138 00108$:
                                    139 ;	../c16stombs.c: 67: if(!codepoint)
      000079 1E 11            [ 2]  140 	ldw	x, (0x11, sp)
      00007B 26 0F            [ 1]  141 	jrne	00113$
      00007D 1E 0F            [ 2]  142 	ldw	x, (0x0f, sp)
      00007F 26 0B            [ 1]  143 	jrne	00113$
                                    144 ;	../c16stombs.c: 69: if(m < n)
      000081 1E 09            [ 2]  145 	ldw	x, (0x09, sp)
      000083 13 19            [ 2]  146 	cpw	x, (0x19, sp)
      000085 24 4E            [ 1]  147 	jrnc	00118$
                                    148 ;	../c16stombs.c: 70: *s = 0;
      000087 1E 15            [ 2]  149 	ldw	x, (0x15, sp)
      000089 7F               [ 1]  150 	clr	(x)
                                    151 ;	../c16stombs.c: 71: break;
      00008A 20 49            [ 2]  152 	jra	00118$
      00008C                        153 00113$:
                                    154 ;	../c16stombs.c: 74: l = wctomb(b, codepoint);
      00008C 96               [ 1]  155 	ldw	x, sp
      00008D 1C 00 05         [ 2]  156 	addw	x, #5
      000090 1F 0D            [ 2]  157 	ldw	(0x0d, sp), x
      000092 16 11            [ 2]  158 	ldw	y, (0x11, sp)
      000094 90 89            [ 2]  159 	pushw	y
      000096 16 11            [ 2]  160 	ldw	y, (0x11, sp)
      000098 90 89            [ 2]  161 	pushw	y
      00009A 89               [ 2]  162 	pushw	x
      00009B CDr00r00         [ 4]  163 	call	_wctomb
      00009E 5B 06            [ 2]  164 	addw	sp, #6
      0000A0 1F 0F            [ 2]  165 	ldw	(0x0f, sp), x
                                    166 ;	../c16stombs.c: 76: if(l < 0)
      0000A2 0D 0F            [ 1]  167 	tnz	(0x0f, sp)
      0000A4 2A 04            [ 1]  168 	jrpl	00115$
                                    169 ;	../c16stombs.c: 77: return(-1);
      0000A6 5F               [ 1]  170 	clrw	x
      0000A7 5A               [ 2]  171 	decw	x
      0000A8 20 2D            [ 2]  172 	jra	00121$
      0000AA                        173 00115$:
                                    174 ;	../c16stombs.c: 79: if(m + l > n)
      0000AA 1E 0F            [ 2]  175 	ldw	x, (0x0f, sp)
      0000AC 72 FB 09         [ 2]  176 	addw	x, (0x09, sp)
      0000AF 1F 11            [ 2]  177 	ldw	(0x11, sp), x
      0000B1 13 19            [ 2]  178 	cpw	x, (0x19, sp)
      0000B3 22 20            [ 1]  179 	jrugt	00118$
                                    180 ;	../c16stombs.c: 82: memcpy(s, b, l);
      0000B5 16 0D            [ 2]  181 	ldw	y, (0x0d, sp)
      0000B7 1E 15            [ 2]  182 	ldw	x, (0x15, sp)
      0000B9 7B 10            [ 1]  183 	ld	a, (0x10, sp)
      0000BB 88               [ 1]  184 	push	a
      0000BC 7B 10            [ 1]  185 	ld	a, (0x10, sp)
      0000BE 88               [ 1]  186 	push	a
      0000BF 90 89            [ 2]  187 	pushw	y
      0000C1 89               [ 2]  188 	pushw	x
      0000C2 CDr00r00         [ 4]  189 	call	___memcpy
      0000C5 5B 06            [ 2]  190 	addw	sp, #6
                                    191 ;	../c16stombs.c: 83: s += l;
      0000C7 1E 15            [ 2]  192 	ldw	x, (0x15, sp)
      0000C9 72 FB 0F         [ 2]  193 	addw	x, (0x0f, sp)
      0000CC 1F 15            [ 2]  194 	ldw	(0x15, sp), x
                                    195 ;	../c16stombs.c: 84: m += l;
      0000CE 1E 11            [ 2]  196 	ldw	x, (0x11, sp)
      0000D0 1F 09            [ 2]  197 	ldw	(0x09, sp), x
      0000D2 CCr00r05         [ 2]  198 	jp	00119$
      0000D5                        199 00118$:
                                    200 ;	../c16stombs.c: 87: return(m);
      0000D5 1E 09            [ 2]  201 	ldw	x, (0x09, sp)
      0000D7                        202 00121$:
                                    203 ;	../c16stombs.c: 88: }
      0000D7 5B 12            [ 2]  204 	addw	sp, #18
      0000D9 81               [ 4]  205 	ret
                                    206 	.area CODE
                                    207 	.area CONST
                                    208 	.area INITIALIZER
                                    209 	.area CABS (ABS)
