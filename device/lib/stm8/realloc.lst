                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module realloc
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl ___memcpy
                                     12 	.globl _memmove
                                     13 	.globl _free
                                     14 	.globl _malloc
                                     15 	.globl _realloc
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area DATA
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area INITIALIZED
                                     24 ;--------------------------------------------------------
                                     25 ; absolute external ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area DABS (ABS)
                                     28 
                                     29 ; default segment ordering for linker
                                     30 	.area HOME
                                     31 	.area GSINIT
                                     32 	.area GSFINAL
                                     33 	.area CONST
                                     34 	.area INITIALIZER
                                     35 	.area CODE
                                     36 
                                     37 ;--------------------------------------------------------
                                     38 ; global & static initialisations
                                     39 ;--------------------------------------------------------
                                     40 	.area HOME
                                     41 	.area GSINIT
                                     42 	.area GSFINAL
                                     43 	.area GSINIT
                                     44 ;--------------------------------------------------------
                                     45 ; Home
                                     46 ;--------------------------------------------------------
                                     47 	.area HOME
                                     48 	.area HOME
                                     49 ;--------------------------------------------------------
                                     50 ; code
                                     51 ;--------------------------------------------------------
                                     52 	.area CODE
                                     53 ;	../realloc.c: 56: void *realloc(void *ptr, size_t size)
                                     54 ;	-----------------------------------------
                                     55 ;	 function realloc
                                     56 ;	-----------------------------------------
      000000                         57 _realloc:
      000000 52 14            [ 2]   58 	sub	sp, #20
                                     59 ;	../realloc.c: 69: if(!ptr)
      000002 1E 17            [ 2]   60 	ldw	x, (0x17, sp)
      000004 26 0B            [ 1]   61 	jrne	00102$
                                     62 ;	../realloc.c: 70: return(malloc(size));
      000006 1E 19            [ 2]   63 	ldw	x, (0x19, sp)
      000008 89               [ 2]   64 	pushw	x
      000009 CDr00r00         [ 4]   65 	call	_malloc
      00000C 5B 02            [ 2]   66 	addw	sp, #2
      00000E CCr01r65         [ 2]   67 	jp	00132$
      000011                         68 00102$:
                                     69 ;	../realloc.c: 72: if(!size)
      000011 1E 19            [ 2]   70 	ldw	x, (0x19, sp)
      000013 26 0C            [ 1]   71 	jrne	00104$
                                     72 ;	../realloc.c: 74: free(ptr);
      000015 1E 17            [ 2]   73 	ldw	x, (0x17, sp)
      000017 89               [ 2]   74 	pushw	x
      000018 CDr00r00         [ 4]   75 	call	_free
      00001B 5B 02            [ 2]   76 	addw	sp, #2
                                     77 ;	../realloc.c: 75: return(0);
      00001D 5F               [ 1]   78 	clrw	x
      00001E CCr01r65         [ 2]   79 	jp	00132$
      000021                         80 00104$:
                                     81 ;	../realloc.c: 78: prev_free = 0, pf = 0;
      000021 5F               [ 1]   82 	clrw	x
      000022 1F 01            [ 2]   83 	ldw	(0x01, sp), x
      000024 5F               [ 1]   84 	clrw	x
      000025 1F 03            [ 2]   85 	ldw	(0x03, sp), x
                                     86 ;	../realloc.c: 79: for(h = __sdcc_heap_free, f = &__sdcc_heap_free; h && h < ptr; prev_free = h, pf = f, f = &(h->next_free), h = h->next_free); // Find adjacent blocks in free list
      000027 CEu00u00         [ 2]   87 	ldw	x, ___sdcc_heap_free+0
      00002A 1F 13            [ 2]   88 	ldw	(0x13, sp), x
      00002C AEr00r00         [ 2]   89 	ldw	x, #(___sdcc_heap_free + 0)
      00002F 1F 05            [ 2]   90 	ldw	(0x05, sp), x
      000031                         91 00130$:
      000031 1E 13            [ 2]   92 	ldw	x, (0x13, sp)
      000033 27 1D            [ 1]   93 	jreq	00105$
      000035 16 17            [ 2]   94 	ldw	y, (0x17, sp)
      000037 17 11            [ 2]   95 	ldw	(0x11, sp), y
      000039 1E 13            [ 2]   96 	ldw	x, (0x13, sp)
      00003B 13 11            [ 2]   97 	cpw	x, (0x11, sp)
      00003D 24 13            [ 1]   98 	jrnc	00105$
      00003F 16 13            [ 2]   99 	ldw	y, (0x13, sp)
      000041 17 01            [ 2]  100 	ldw	(0x01, sp), y
      000043 16 05            [ 2]  101 	ldw	y, (0x05, sp)
      000045 17 03            [ 2]  102 	ldw	(0x03, sp), y
      000047 1E 13            [ 2]  103 	ldw	x, (0x13, sp)
      000049 5C               [ 1]  104 	incw	x
      00004A 5C               [ 1]  105 	incw	x
      00004B 1F 05            [ 2]  106 	ldw	(0x05, sp), x
      00004D FE               [ 2]  107 	ldw	x, (x)
      00004E 1F 13            [ 2]  108 	ldw	(0x13, sp), x
      000050 20 DF            [ 2]  109 	jra	00130$
      000052                        110 00105$:
                                    111 ;	../realloc.c: 80: next_free = h;
      000052 16 13            [ 2]  112 	ldw	y, (0x13, sp)
      000054 17 07            [ 2]  113 	ldw	(0x07, sp), y
                                    114 ;	../realloc.c: 82: if(!size || size + offsetof(struct header, next_free) < size)
      000056 1E 19            [ 2]  115 	ldw	x, (0x19, sp)
      000058 27 06            [ 1]  116 	jreq	00106$
      00005A 5C               [ 1]  117 	incw	x
      00005B 5C               [ 1]  118 	incw	x
      00005C 13 19            [ 2]  119 	cpw	x, (0x19, sp)
      00005E 24 04            [ 1]  120 	jrnc	00107$
      000060                        121 00106$:
                                    122 ;	../realloc.c: 83: return(0);
      000060 5F               [ 1]  123 	clrw	x
      000061 CCr01r65         [ 2]  124 	jp	00132$
      000064                        125 00107$:
                                    126 ;	../realloc.c: 84: blocksize = size + offsetof(struct header, next_free);
                                    127 ;	../realloc.c: 85: if(blocksize < sizeof(struct header)) // Requiring a minimum size makes it easier to implement free(), and avoid memory leaks.
      000064 1F 09            [ 2]  128 	ldw	(0x09, sp), x
      000066 A3 00 04         [ 2]  129 	cpw	x, #0x0004
      000069 24 05            [ 1]  130 	jrnc	00110$
                                    131 ;	../realloc.c: 86: blocksize = sizeof(struct header);
      00006B AE 00 04         [ 2]  132 	ldw	x, #0x0004
      00006E 1F 09            [ 2]  133 	ldw	(0x09, sp), x
      000070                        134 00110$:
                                    135 ;	../realloc.c: 88: h = (void HEAPSPACE *)((char HEAPSPACE *)(ptr) - offsetof(struct header, next_free));
      000070 1E 17            [ 2]  136 	ldw	x, (0x17, sp)
      000072 5A               [ 2]  137 	decw	x
      000073 5A               [ 2]  138 	decw	x
                                    139 ;	../realloc.c: 89: oldblocksize = (char HEAPSPACE *)(h->next) - (char HEAPSPACE *)h;
      000074 1F 0B            [ 2]  140 	ldw	(0x0b, sp), x
      000076 FE               [ 2]  141 	ldw	x, (x)
      000077 1F 0D            [ 2]  142 	ldw	(0x0d, sp), x
      000079 16 0B            [ 2]  143 	ldw	y, (0x0b, sp)
      00007B 17 0F            [ 2]  144 	ldw	(0x0f, sp), y
      00007D 72 F0 0F         [ 2]  145 	subw	x, (0x0f, sp)
                                    146 ;	../realloc.c: 91: maxblocksize = oldblocksize;
      000080 1F 11            [ 2]  147 	ldw	(0x11, sp), x
      000082 1F 13            [ 2]  148 	ldw	(0x13, sp), x
                                    149 ;	../realloc.c: 92: if(prev_free && prev_free->next == h) // Can merge with previous block
      000084 1E 01            [ 2]  150 	ldw	x, (0x01, sp)
      000086 27 10            [ 1]  151 	jreq	00112$
      000088 FE               [ 2]  152 	ldw	x, (x)
      000089 13 0B            [ 2]  153 	cpw	x, (0x0b, sp)
      00008B 26 0B            [ 1]  154 	jrne	00112$
                                    155 ;	../realloc.c: 93: maxblocksize += (char HEAPSPACE *)h - (char HEAPSPACE *)prev_free;
      00008D 1E 01            [ 2]  156 	ldw	x, (0x01, sp)
      00008F 50               [ 2]  157 	negw	x
      000090 72 FB 0F         [ 2]  158 	addw	x, (0x0f, sp)
      000093 72 FB 11         [ 2]  159 	addw	x, (0x11, sp)
      000096 1F 13            [ 2]  160 	ldw	(0x13, sp), x
      000098                        161 00112$:
                                    162 ;	../realloc.c: 94: if(next_free == h->next) // Can merge with next block
      000098 1E 07            [ 2]  163 	ldw	x, (0x07, sp)
      00009A 13 0D            [ 2]  164 	cpw	x, (0x0d, sp)
      00009C 26 0F            [ 1]  165 	jrne	00115$
                                    166 ;	../realloc.c: 95: maxblocksize += (char HEAPSPACE *)(next_free->next) - (char HEAPSPACE *)next_free;
      00009E 1E 07            [ 2]  167 	ldw	x, (0x07, sp)
      0000A0 FE               [ 2]  168 	ldw	x, (x)
      0000A1 16 07            [ 2]  169 	ldw	y, (0x07, sp)
      0000A3 17 0F            [ 2]  170 	ldw	(0x0f, sp), y
      0000A5 72 F0 0F         [ 2]  171 	subw	x, (0x0f, sp)
      0000A8 72 FB 13         [ 2]  172 	addw	x, (0x13, sp)
      0000AB 1F 13            [ 2]  173 	ldw	(0x13, sp), x
      0000AD                        174 00115$:
                                    175 ;	../realloc.c: 97: if(blocksize <= maxblocksize) // Can resize in place.
      0000AD 1E 09            [ 2]  176 	ldw	x, (0x09, sp)
      0000AF 13 13            [ 2]  177 	cpw	x, (0x13, sp)
      0000B1 23 03            [ 2]  178 	jrule	00247$
      0000B3 CCr01r36         [ 2]  179 	jp	00125$
      0000B6                        180 00247$:
                                    181 ;	../realloc.c: 99: if(prev_free && prev_free->next == h) // Always move into previous block to defragment
      0000B6 1E 01            [ 2]  182 	ldw	x, (0x01, sp)
      0000B8 27 2E            [ 1]  183 	jreq	00117$
      0000BA FE               [ 2]  184 	ldw	x, (x)
      0000BB 13 0B            [ 2]  185 	cpw	x, (0x0b, sp)
      0000BD 26 29            [ 1]  186 	jrne	00117$
                                    187 ;	../realloc.c: 101: memmove(prev_free, h, blocksize <= oldblocksize ? blocksize : oldblocksize);
      0000BF 1E 09            [ 2]  188 	ldw	x, (0x09, sp)
      0000C1 13 11            [ 2]  189 	cpw	x, (0x11, sp)
      0000C3 22 04            [ 1]  190 	jrugt	00134$
      0000C5 16 09            [ 2]  191 	ldw	y, (0x09, sp)
      0000C7 17 11            [ 2]  192 	ldw	(0x11, sp), y
      0000C9                        193 00134$:
      0000C9 16 0B            [ 2]  194 	ldw	y, (0x0b, sp)
      0000CB 1E 01            [ 2]  195 	ldw	x, (0x01, sp)
      0000CD 7B 12            [ 1]  196 	ld	a, (0x12, sp)
      0000CF 88               [ 1]  197 	push	a
      0000D0 7B 12            [ 1]  198 	ld	a, (0x12, sp)
      0000D2 88               [ 1]  199 	push	a
      0000D3 90 89            [ 2]  200 	pushw	y
      0000D5 89               [ 2]  201 	pushw	x
      0000D6 CDr00r00         [ 4]  202 	call	_memmove
      0000D9 5B 06            [ 2]  203 	addw	sp, #6
                                    204 ;	../realloc.c: 102: h = prev_free;
      0000DB 16 01            [ 2]  205 	ldw	y, (0x01, sp)
      0000DD 17 0B            [ 2]  206 	ldw	(0x0b, sp), y
                                    207 ;	../realloc.c: 103: *pf = next_free;
      0000DF 1E 03            [ 2]  208 	ldw	x, (0x03, sp)
      0000E1 16 07            [ 2]  209 	ldw	y, (0x07, sp)
      0000E3 FF               [ 2]  210 	ldw	(x), y
                                    211 ;	../realloc.c: 104: f = pf;
      0000E4 16 03            [ 2]  212 	ldw	y, (0x03, sp)
      0000E6 17 05            [ 2]  213 	ldw	(0x05, sp), y
      0000E8                        214 00117$:
                                    215 ;	../realloc.c: 107: if(next_free && next_free == h->next) // Merge with following block
      0000E8 1E 07            [ 2]  216 	ldw	x, (0x07, sp)
      0000EA 27 16            [ 1]  217 	jreq	00120$
      0000EC 1E 0B            [ 2]  218 	ldw	x, (0x0b, sp)
      0000EE FE               [ 2]  219 	ldw	x, (x)
      0000EF 13 07            [ 2]  220 	cpw	x, (0x07, sp)
      0000F1 26 0F            [ 1]  221 	jrne	00120$
                                    222 ;	../realloc.c: 109: h->next = next_free->next;
      0000F3 1E 07            [ 2]  223 	ldw	x, (0x07, sp)
      0000F5 FE               [ 2]  224 	ldw	x, (x)
      0000F6 16 0B            [ 2]  225 	ldw	y, (0x0b, sp)
      0000F8 90 FF            [ 2]  226 	ldw	(y), x
                                    227 ;	../realloc.c: 110: *f = next_free->next_free;
      0000FA 1E 07            [ 2]  228 	ldw	x, (0x07, sp)
      0000FC EE 02            [ 2]  229 	ldw	x, (0x2, x)
      0000FE 16 05            [ 2]  230 	ldw	y, (0x05, sp)
      000100 90 FF            [ 2]  231 	ldw	(y), x
      000102                        232 00120$:
                                    233 ;	../realloc.c: 113: if(maxblocksize >= blocksize + sizeof(struct header)) // Create new block from free space
      000102 1E 09            [ 2]  234 	ldw	x, (0x09, sp)
      000104 1C 00 04         [ 2]  235 	addw	x, #0x0004
      000107 1F 11            [ 2]  236 	ldw	(0x11, sp), x
      000109 1E 13            [ 2]  237 	ldw	x, (0x13, sp)
      00010B 13 11            [ 2]  238 	cpw	x, (0x11, sp)
      00010D 25 21            [ 1]  239 	jrc	00123$
                                    240 ;	../realloc.c: 115: header_t *const newheader = (header_t *const)((char HEAPSPACE *)h + blocksize);
      00010F 1E 0B            [ 2]  241 	ldw	x, (0x0b, sp)
      000111 72 FB 09         [ 2]  242 	addw	x, (0x09, sp)
      000114 1F 13            [ 2]  243 	ldw	(0x13, sp), x
                                    244 ;	../realloc.c: 116: newheader->next = h->next;
      000116 1E 0B            [ 2]  245 	ldw	x, (0x0b, sp)
      000118 FE               [ 2]  246 	ldw	x, (x)
      000119 16 13            [ 2]  247 	ldw	y, (0x13, sp)
      00011B 90 FF            [ 2]  248 	ldw	(y), x
                                    249 ;	../realloc.c: 117: newheader->next_free = *f;
      00011D 1E 13            [ 2]  250 	ldw	x, (0x13, sp)
      00011F 5C               [ 1]  251 	incw	x
      000120 5C               [ 1]  252 	incw	x
      000121 16 05            [ 2]  253 	ldw	y, (0x05, sp)
      000123 90 FE            [ 2]  254 	ldw	y, (y)
      000125 FF               [ 2]  255 	ldw	(x), y
                                    256 ;	../realloc.c: 118: *f = newheader;
      000126 1E 05            [ 2]  257 	ldw	x, (0x05, sp)
      000128 16 13            [ 2]  258 	ldw	y, (0x13, sp)
      00012A FF               [ 2]  259 	ldw	(x), y
                                    260 ;	../realloc.c: 119: h->next = newheader;
      00012B 1E 0B            [ 2]  261 	ldw	x, (0x0b, sp)
      00012D 16 13            [ 2]  262 	ldw	y, (0x13, sp)
      00012F FF               [ 2]  263 	ldw	(x), y
      000130                        264 00123$:
                                    265 ;	../realloc.c: 122: return(&(h->next_free));
      000130 1E 0B            [ 2]  266 	ldw	x, (0x0b, sp)
      000132 5C               [ 1]  267 	incw	x
      000133 5C               [ 1]  268 	incw	x
      000134 20 2F            [ 2]  269 	jra	00132$
      000136                        270 00125$:
                                    271 ;	../realloc.c: 125: if(ret = malloc(size))
      000136 1E 19            [ 2]  272 	ldw	x, (0x19, sp)
      000138 89               [ 2]  273 	pushw	x
      000139 CDr00r00         [ 4]  274 	call	_malloc
      00013C 5B 02            [ 2]  275 	addw	sp, #2
      00013E 1F 13            [ 2]  276 	ldw	(0x13, sp), x
      000140 5D               [ 2]  277 	tnzw	x
      000141 27 21            [ 1]  278 	jreq	00127$
                                    279 ;	../realloc.c: 127: size_t oldsize = oldblocksize - offsetof(struct header, next_free);
      000143 1E 11            [ 2]  280 	ldw	x, (0x11, sp)
      000145 5A               [ 2]  281 	decw	x
      000146 5A               [ 2]  282 	decw	x
                                    283 ;	../realloc.c: 128: memcpy(ret, ptr, size <= oldsize ? size : oldsize);
      000147 13 19            [ 2]  284 	cpw	x, (0x19, sp)
      000149 25 02            [ 1]  285 	jrc	00136$
      00014B 1E 19            [ 2]  286 	ldw	x, (0x19, sp)
      00014D                        287 00136$:
      00014D 89               [ 2]  288 	pushw	x
      00014E 1E 19            [ 2]  289 	ldw	x, (0x19, sp)
      000150 89               [ 2]  290 	pushw	x
      000151 1E 17            [ 2]  291 	ldw	x, (0x17, sp)
      000153 89               [ 2]  292 	pushw	x
      000154 CDr00r00         [ 4]  293 	call	___memcpy
      000157 5B 06            [ 2]  294 	addw	sp, #6
                                    295 ;	../realloc.c: 129: free(ptr);
      000159 1E 17            [ 2]  296 	ldw	x, (0x17, sp)
      00015B 89               [ 2]  297 	pushw	x
      00015C CDr00r00         [ 4]  298 	call	_free
      00015F 5B 02            [ 2]  299 	addw	sp, #2
                                    300 ;	../realloc.c: 130: return(ret);
      000161 1E 13            [ 2]  301 	ldw	x, (0x13, sp)
                                    302 ;	../realloc.c: 133: return(0);
      000163 21                     303 	.byte 0x21
      000164                        304 00127$:
      000164 5F               [ 1]  305 	clrw	x
      000165                        306 00132$:
                                    307 ;	../realloc.c: 134: }
      000165 5B 14            [ 2]  308 	addw	sp, #20
      000167 81               [ 4]  309 	ret
                                    310 	.area CODE
                                    311 	.area CONST
                                    312 	.area INITIALIZER
                                    313 	.area CABS (ABS)
