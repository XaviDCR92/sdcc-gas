                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module gets
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 
                                     27 ; default segment ordering for linker
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area CONST
                                     32 	.area INITIALIZER
                                     33 	.area CODE
                                     34 
                                     35 ;--------------------------------------------------------
                                     36 ; global & static initialisations
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
                                     39 	.area GSINIT
                                     40 	.area GSFINAL
                                     41 	.area GSINIT
                                     42 ;--------------------------------------------------------
                                     43 ; Home
                                     44 ;--------------------------------------------------------
                                     45 	.area HOME
                                     46 	.area HOME
                                     47 ;--------------------------------------------------------
                                     48 ; code
                                     49 ;--------------------------------------------------------
                                     50 	.area CODE
                                     51 ;	../gets.c: 32: gets (char *s)
                                     52 ;	-----------------------------------------
                                     53 ;	 function gets
                                     54 ;	-----------------------------------------
      000000                         55 _gets:
      000000 52 02            [ 2]   56 	sub	sp, #2
                                     57 ;	../gets.c: 35: unsigned int count = 0;
      000002 5F               [ 1]   58 	clrw	x
      000003 1F 01            [ 2]   59 	ldw	(0x01, sp), x
                                     60 ;	../gets.c: 37: while (1)
      000005                         61 00109$:
                                     62 ;	../gets.c: 39: c = getchar ();
      000005 CDr00r00         [ 4]   63 	call	_getchar
      000008 9F               [ 1]   64 	ld	a, xl
                                     65 ;	../gets.c: 40: switch(c)
      000009 A1 08            [ 1]   66 	cp	a, #0x08
      00000B 27 0C            [ 1]   67 	jreq	00101$
                                     68 ;	../gets.c: 57: *s = 0;
      00000D 1E 05            [ 2]   69 	ldw	x, (0x05, sp)
                                     70 ;	../gets.c: 40: switch(c)
      00000F A1 0A            [ 1]   71 	cp	a, #0x0a
      000011 27 31            [ 1]   72 	jreq	00105$
      000013 A1 0D            [ 1]   73 	cp	a, #0x0d
      000015 27 2D            [ 1]   74 	jreq	00105$
      000017 20 42            [ 2]   75 	jra	00106$
                                     76 ;	../gets.c: 42: case '\b': /* backspace */
      000019                         77 00101$:
                                     78 ;	../gets.c: 43: if (count)
      000019 1E 01            [ 2]   79 	ldw	x, (0x01, sp)
      00001B 27 E8            [ 1]   80 	jreq	00109$
                                     81 ;	../gets.c: 45: putchar ('\b');
      00001D 4B 08            [ 1]   82 	push	#0x08
      00001F 4B 00            [ 1]   83 	push	#0x00
      000021 CDr00r00         [ 4]   84 	call	_putchar
      000024 5B 02            [ 2]   85 	addw	sp, #2
                                     86 ;	../gets.c: 46: putchar (' ');
      000026 4B 20            [ 1]   87 	push	#0x20
      000028 4B 00            [ 1]   88 	push	#0x00
      00002A CDr00r00         [ 4]   89 	call	_putchar
      00002D 5B 02            [ 2]   90 	addw	sp, #2
                                     91 ;	../gets.c: 47: putchar ('\b');
      00002F 4B 08            [ 1]   92 	push	#0x08
      000031 4B 00            [ 1]   93 	push	#0x00
      000033 CDr00r00         [ 4]   94 	call	_putchar
      000036 5B 02            [ 2]   95 	addw	sp, #2
                                     96 ;	../gets.c: 48: --s;
      000038 1E 05            [ 2]   97 	ldw	x, (0x05, sp)
      00003A 5A               [ 2]   98 	decw	x
      00003B 1F 05            [ 2]   99 	ldw	(0x05, sp), x
                                    100 ;	../gets.c: 49: --count;
      00003D 1E 01            [ 2]  101 	ldw	x, (0x01, sp)
      00003F 5A               [ 2]  102 	decw	x
      000040 1F 01            [ 2]  103 	ldw	(0x01, sp), x
                                    104 ;	../gets.c: 51: break;
      000042 20 C1            [ 2]  105 	jra	00109$
                                    106 ;	../gets.c: 54: case '\r': /* CR or LF */
      000044                        107 00105$:
                                    108 ;	../gets.c: 55: putchar ('\r');
      000044 89               [ 2]  109 	pushw	x
      000045 4B 0D            [ 1]  110 	push	#0x0d
      000047 4B 00            [ 1]  111 	push	#0x00
      000049 CDr00r00         [ 4]  112 	call	_putchar
      00004C 5B 02            [ 2]  113 	addw	sp, #2
      00004E 4B 0A            [ 1]  114 	push	#0x0a
      000050 4B 00            [ 1]  115 	push	#0x00
      000052 CDr00r00         [ 4]  116 	call	_putchar
      000055 5B 02            [ 2]  117 	addw	sp, #2
      000057 85               [ 2]  118 	popw	x
                                    119 ;	../gets.c: 57: *s = 0;
      000058 7F               [ 1]  120 	clr	(x)
                                    121 ;	../gets.c: 58: return s;
      000059 20 13            [ 2]  122 	jra	00111$
                                    123 ;	../gets.c: 60: default:
      00005B                        124 00106$:
                                    125 ;	../gets.c: 61: *s++ = c;
      00005B F7               [ 1]  126 	ld	(x), a
      00005C 5C               [ 1]  127 	incw	x
      00005D 1F 05            [ 2]  128 	ldw	(0x05, sp), x
                                    129 ;	../gets.c: 62: ++count;
      00005F 1E 01            [ 2]  130 	ldw	x, (0x01, sp)
      000061 5C               [ 1]  131 	incw	x
      000062 1F 01            [ 2]  132 	ldw	(0x01, sp), x
                                    133 ;	../gets.c: 63: putchar (c);
      000064 5F               [ 1]  134 	clrw	x
      000065 97               [ 1]  135 	ld	xl, a
      000066 89               [ 2]  136 	pushw	x
      000067 CDr00r00         [ 4]  137 	call	_putchar
      00006A 5B 02            [ 2]  138 	addw	sp, #2
                                    139 ;	../gets.c: 65: }
      00006C 20 97            [ 2]  140 	jra	00109$
      00006E                        141 00111$:
                                    142 ;	../gets.c: 67: }
      00006E 5B 02            [ 2]  143 	addw	sp, #2
      000070 81               [ 4]  144 	ret
                                    145 	.area CODE
                                    146 	.area CONST
                                    147 	.area INITIALIZER
                                    148 	.area CABS (ABS)
