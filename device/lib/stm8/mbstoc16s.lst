                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.3 #11345 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module mbstoc16s
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _mbtowc
                                     12 	.globl ___mbstoc16s
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 
                                     26 ; default segment ordering for linker
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area CONST
                                     31 	.area INITIALIZER
                                     32 	.area CODE
                                     33 
                                     34 ;--------------------------------------------------------
                                     35 ; global & static initialisations
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area GSINIT
                                     41 ;--------------------------------------------------------
                                     42 ; Home
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area HOME
                                     46 ;--------------------------------------------------------
                                     47 ; code
                                     48 ;--------------------------------------------------------
                                     49 	.area CODE
                                     50 ;	../mbstoc16s.c: 44: size_t __mbstoc16s(char16_t *restrict c16s, const char *restrict s, size_t n)
                                     51 ;	-----------------------------------------
                                     52 ;	 function __mbstoc16s
                                     53 ;	-----------------------------------------
      000000                         54 ___mbstoc16s:
      000000 52 11            [ 2]   55 	sub	sp, #17
                                     56 ;	../mbstoc16s.c: 46: size_t m = 0;
      000002 5F               [ 1]   57 	clrw	x
      000003 1F 09            [ 2]   58 	ldw	(0x09, sp), x
                                     59 ;	../mbstoc16s.c: 85: return(m);
      000005                         60 00116$:
                                     61 ;	../mbstoc16s.c: 53: l = mbtowc(&codepoint, s, MB_LEN_MAX);
      000005 96               [ 1]   62 	ldw	x, sp
      000006 1C 00 05         [ 2]   63 	addw	x, #5
      000009 4B 04            [ 1]   64 	push	#0x04
      00000B 4B 00            [ 1]   65 	push	#0x00
      00000D 16 18            [ 2]   66 	ldw	y, (0x18, sp)
      00000F 90 89            [ 2]   67 	pushw	y
      000011 89               [ 2]   68 	pushw	x
      000012 CDr00r00         [ 4]   69 	call	_mbtowc
      000015 5B 06            [ 2]   70 	addw	sp, #6
      000017 1F 0B            [ 2]   71 	ldw	(0x0b, sp), x
                                     72 ;	../mbstoc16s.c: 55: if(l < 0)
      000019 0D 0B            [ 1]   73 	tnz	(0x0b, sp)
      00001B 2A 05            [ 1]   74 	jrpl	00106$
                                     75 ;	../mbstoc16s.c: 56: return(-1);
      00001D 5F               [ 1]   76 	clrw	x
      00001E 5A               [ 2]   77 	decw	x
      00001F CCr00rC5         [ 2]   78 	jp	00118$
      000022                         79 00106$:
                                     80 ;	../mbstoc16s.c: 59: if(m < n)
      000022 1E 09            [ 2]   81 	ldw	x, (0x09, sp)
      000024 13 18            [ 2]   82 	cpw	x, (0x18, sp)
      000026 4F               [ 1]   83 	clr	a
      000027 49               [ 1]   84 	rlc	a
      000028 6B 0D            [ 1]   85 	ld	(0x0d, sp), a
                                     86 ;	../mbstoc16s.c: 60: *c16s = 0;
      00002A 16 14            [ 2]   87 	ldw	y, (0x14, sp)
                                     88 ;	../mbstoc16s.c: 57: else if(!l)
      00002C 1E 0B            [ 2]   89 	ldw	x, (0x0b, sp)
      00002E 26 0E            [ 1]   90 	jrne	00107$
                                     91 ;	../mbstoc16s.c: 59: if(m < n)
      000030 0D 0D            [ 1]   92 	tnz	(0x0d, sp)
      000032 26 03            [ 1]   93 	jrne	00157$
      000034 CCr00rC3         [ 2]   94 	jp	00115$
      000037                         95 00157$:
                                     96 ;	../mbstoc16s.c: 60: *c16s = 0;
      000037 93               [ 1]   97 	ldw	x, y
      000038 6F 01            [ 1]   98 	clr	(0x1, x)
      00003A 7F               [ 1]   99 	clr	(x)
                                    100 ;	../mbstoc16s.c: 61: break;
      00003B CCr00rC3         [ 2]  101 	jp	00115$
      00003E                        102 00107$:
                                    103 ;	../mbstoc16s.c: 70: m++;
      00003E 1E 09            [ 2]  104 	ldw	x, (0x09, sp)
      000040 5C               [ 1]  105 	incw	x
      000041 1F 0E            [ 2]  106 	ldw	(0x0e, sp), x
                                    107 ;	../mbstoc16s.c: 69: *c16s++ = codepoint;
      000043 93               [ 1]  108 	ldw	x, y
      000044 5C               [ 1]  109 	incw	x
      000045 5C               [ 1]  110 	incw	x
      000046 1F 10            [ 2]  111 	ldw	(0x10, sp), x
                                    112 ;	../mbstoc16s.c: 64: if (codepoint <= 0xffff) // Basic multilingual plane
      000048 1E 05            [ 2]  113 	ldw	x, (0x05, sp)
      00004A 26 16            [ 1]  114 	jrne	00113$
                                    115 ;	../mbstoc16s.c: 66: if (m >= n)
      00004C 7B 0D            [ 1]  116 	ld	a, (0x0d, sp)
      00004E 27 73            [ 1]  117 	jreq	00115$
                                    118 ;	../mbstoc16s.c: 69: *c16s++ = codepoint;
      000050 1E 07            [ 2]  119 	ldw	x, (0x07, sp)
      000052 1F 09            [ 2]  120 	ldw	(0x09, sp), x
      000054 93               [ 1]  121 	ldw	x, y
      000055 16 09            [ 2]  122 	ldw	y, (0x09, sp)
      000057 FF               [ 2]  123 	ldw	(x), y
      000058 16 10            [ 2]  124 	ldw	y, (0x10, sp)
      00005A 17 14            [ 2]  125 	ldw	(0x14, sp), y
                                    126 ;	../mbstoc16s.c: 70: m++;
      00005C 16 0E            [ 2]  127 	ldw	y, (0x0e, sp)
      00005E 17 09            [ 2]  128 	ldw	(0x09, sp), y
      000060 20 57            [ 2]  129 	jra	00114$
      000062                        130 00113$:
                                    131 ;	../mbstoc16s.c: 74: if (m + 1 >= n)
      000062 1E 0E            [ 2]  132 	ldw	x, (0x0e, sp)
      000064 13 18            [ 2]  133 	cpw	x, (0x18, sp)
      000066 24 5B            [ 1]  134 	jrnc	00115$
                                    135 ;	../mbstoc16s.c: 77: codepoint -= 0x100000;
      000068 7B 08            [ 1]  136 	ld	a, (0x08, sp)
      00006A 6B 04            [ 1]  137 	ld	(0x04, sp), a
      00006C 7B 07            [ 1]  138 	ld	a, (0x07, sp)
      00006E 1E 05            [ 2]  139 	ldw	x, (0x05, sp)
      000070 1D 00 10         [ 2]  140 	subw	x, #0x0010
      000073 6B 07            [ 1]  141 	ld	(0x07, sp), a
      000075 1F 05            [ 2]  142 	ldw	(0x05, sp), x
      000077 7B 04            [ 1]  143 	ld	a, (0x04, sp)
      000079 6B 08            [ 1]  144 	ld	(0x08, sp), a
                                    145 ;	../mbstoc16s.c: 78: *c16s++ = ((codepoint >> 10) & 0x3ff) + 0xd800;
      00007B 1E 06            [ 2]  146 	ldw	x, (0x06, sp)
      00007D 1F 03            [ 2]  147 	ldw	(0x03, sp), x
      00007F 7B 05            [ 1]  148 	ld	a, (0x05, sp)
      000081 6B 02            [ 1]  149 	ld	(0x02, sp), a
      000083 0F 01            [ 1]  150 	clr	(0x01, sp)
      000085 04 02            [ 1]  151 	srl	(0x02, sp)
      000087 06 03            [ 1]  152 	rrc	(0x03, sp)
      000089 06 04            [ 1]  153 	rrc	(0x04, sp)
      00008B 04 02            [ 1]  154 	srl	(0x02, sp)
      00008D 06 03            [ 1]  155 	rrc	(0x03, sp)
      00008F 06 04            [ 1]  156 	rrc	(0x04, sp)
      000091 7B 04            [ 1]  157 	ld	a, (0x04, sp)
      000093 97               [ 1]  158 	ld	xl, a
      000094 7B 03            [ 1]  159 	ld	a, (0x03, sp)
      000096 A4 03            [ 1]  160 	and	a, #0x03
      000098 95               [ 1]  161 	ld	xh, a
      000099 1C D8 00         [ 2]  162 	addw	x, #0xd800
      00009C 90 FF            [ 2]  163 	ldw	(y), x
      00009E 16 10            [ 2]  164 	ldw	y, (0x10, sp)
                                    165 ;	../mbstoc16s.c: 79: *c16s++ = (codepoint & 0x3ff) + 0xdc00;
      0000A0 17 14            [ 2]  166 	ldw	(0x14, sp), y
      0000A2 1E 07            [ 2]  167 	ldw	x, (0x07, sp)
      0000A4 9E               [ 1]  168 	ld	a, xh
      0000A5 A4 03            [ 1]  169 	and	a, #0x03
      0000A7 95               [ 1]  170 	ld	xh, a
      0000A8 1C DC 00         [ 2]  171 	addw	x, #0xdc00
      0000AB 90 FF            [ 2]  172 	ldw	(y), x
      0000AD 72 A9 00 02      [ 2]  173 	addw	y, #0x0002
      0000B1 17 14            [ 2]  174 	ldw	(0x14, sp), y
                                    175 ;	../mbstoc16s.c: 80: m += 2;
      0000B3 1E 09            [ 2]  176 	ldw	x, (0x09, sp)
      0000B5 5C               [ 1]  177 	incw	x
      0000B6 5C               [ 1]  178 	incw	x
      0000B7 1F 09            [ 2]  179 	ldw	(0x09, sp), x
      0000B9                        180 00114$:
                                    181 ;	../mbstoc16s.c: 82: s += l;
      0000B9 1E 16            [ 2]  182 	ldw	x, (0x16, sp)
      0000BB 72 FB 0B         [ 2]  183 	addw	x, (0x0b, sp)
      0000BE 1F 16            [ 2]  184 	ldw	(0x16, sp), x
      0000C0 CCr00r05         [ 2]  185 	jp	00116$
      0000C3                        186 00115$:
                                    187 ;	../mbstoc16s.c: 85: return(m);
      0000C3 1E 09            [ 2]  188 	ldw	x, (0x09, sp)
      0000C5                        189 00118$:
                                    190 ;	../mbstoc16s.c: 86: }
      0000C5 5B 11            [ 2]  191 	addw	sp, #17
      0000C7 81               [ 4]  192 	ret
                                    193 	.area CODE
                                    194 	.area CONST
                                    195 	.area INITIALIZER
                                    196 	.area CABS (ABS)
